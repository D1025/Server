//
// FOnline: New Dawn
// Donald
//
// item_achievementbook.fos
//

#include "_macros.fos"
#include "_defines.fos"
#include "MsgStr.h"

import int NextLevelNeedExp(Critter& cr) from "parameters";

void _InitBook(Item& item, bool firstTime)
{
    item.SetEvent(ITEM_EVENT_USE,   "_TentUse");
}

bool _TentUse(Item& item, Critter& cr, Critter@ onCritter, Item@ onItem, Scenery@ onScenery)
{
    if(valid(onCritter) || valid(onItem) || valid(onScenery))
    {
        cr.SayMsg(SAY_NETMSG, TEXTMSG_GAME, STR_USE_NOTHING);
        return(true);
    }

    if(valid(cr))
    {
		if((item.Val1==0) && cr.Stat[ST_LEVEL]>1)
		{
			cr.Say(SAY_NETMSG, "|0xFF4400 You must be level 1 to open this book.");
			return(true);
		}
		else if(item.Val1==0) // No owner assigned yet, assigning the book to it's user + first time use
		{
			item.Val1=cr.Id;
			cr.Say(SAY_NETMSG, "Book assigned to " + cr.Name + ".");
			for (int i = 0; i < 2; i++)
            {
                cr.StatBase[ST_EXPERIENCE]+=NextLevelNeedExp(cr);
                if(item.Val0<2)
                    DeleteItem(item);
                else
                {
                	item.Val0--;
                	cr.Say(SAY_NETMSG, item.Val0 + " levels remaining.");
                }
            }
			item.Update();
			return(true);
		}
		else if(uint(item.Val1)!=cr.Id) // Wrong user
		{
			cr.Say(SAY_NETMSG, "|0xFF4400 It is not your book.");
			return(true);
		}
		else if(uint(item.Val1)==cr.Id) // Proper user, processing the book
		{
			int level = cr.Stat[ST_LEVEL];

			if(item.Val0+level!=item.Val2)
			{
				cr.Say(SAY_NETMSG, "|0xFF4400 You cannot use this book anymore.");
				return(true);
			}
			if (level >= 30)
			{
			    for (int i = 0; i < item.Val0; i++)
                {
                    cr.StatBase[ST_EXPERIENCE]+=NextLevelNeedExp(cr);
                }
                DeleteItem(item);
                return(true);
			}

			int perkUp = 3;
		    int nextPerkLevel = (perkUp - (level % perkUp)) % perkUp;
		    if (nextPerkLevel == 0) {
                nextPerkLevel = 3;
            }
            for (int i = 0; i < nextPerkLevel; i++)
            {
                cr.StatBase[ST_EXPERIENCE]+=NextLevelNeedExp(cr);
                if(item.Val0<2)
                    DeleteItem(item);
                else
                {
                	item.Val0--;
                	cr.Say(SAY_NETMSG, item.Val0 + " levels remaining.");
                }
            }
            item.Update();
		}
    }
    return(true);
}