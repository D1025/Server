

bool AddMiscPlane(Critter&npc,uint priority,uint waitSecond,string@funcName)
{
	NpcPlane@plane=CreatePlane();
	plane.Type=(0);
	plane.Priority=(priority==0?(10):priority);
	plane.Misc_WaitSecond=waitSecond;
	if((@funcName!=null)&&!plane.Misc_SetScript(funcName))
	{
		Log("Set script <"+funcName+"> fail");
		return false;
	}
	return npc.AddPlane(plane);
}

bool AddMiscPlane(Critter&npc,uint priority,int identifier,uint identifierExt,uint waitSecond,string@funcName)
{
	NpcPlane@plane=CreatePlane();
	plane.Type=(0);
	plane.Priority=(priority==0?(10):priority);
	plane.Identifier=identifier;
	plane.IdentifierExt=identifierExt;
	plane.Misc_WaitSecond=waitSecond;
	if((@funcName!=null)&&!plane.Misc_SetScript(funcName))
	{
		Log("Set script <"+funcName+"> fail");
		return false;
	}
	return npc.AddPlane(plane);
}

bool AddWalkPlane(Critter&npc,uint priority,uint16 hexX,uint16 hexY,uint8 dir,bool run,uint cut)
{
	if(!npc.IsCanWalk())
	return false;
	
	NpcPlane@plane=CreatePlane();
	plane.Type=(2);
	plane.Priority=(priority==0?(20):priority);
	plane.Walk_HexX=hexX;
	plane.Walk_HexY=hexY;
	plane.Walk_Dir=dir;
	plane.Run=run;
	plane.Walk_Cut=cut;
	return npc.AddPlane(plane);
}

bool AddWalkPlane(Critter&npc,uint priority,int identifier,uint identifierExt,uint16 hexX,uint16 hexY,uint8 dir,bool run,uint cut)
{
	if(!npc.IsCanWalk())
	return false;
	
	NpcPlane@plane=CreatePlane();
	plane.Type=(2);
	plane.Priority=(priority==0?(20):priority);
	plane.Identifier=identifier;
	plane.IdentifierExt=identifierExt;
	plane.Walk_HexX=hexX;
	plane.Walk_HexY=hexY;
	plane.Walk_Dir=dir;
	plane.Run=run;
	plane.Walk_Cut=cut;
	return npc.AddPlane(plane);
}

bool AddAttackPlane(Critter&npc,uint priority,Critter&target)
{
	if(npc.IsPlayer())
	{
		Map@map=npc.GetMap();
		uint loc=0;
		if((@map!=null))
		loc=map.GetLocation().GetProtoId();
		Log("ERR: adding attack plane to player, loc pid="+loc);
	}
	NpcPlane@plane=CreatePlane();
	plane.Type=(1);
	plane.Priority=(priority==0?(50):priority);
	plane.Attack_TargId=target.Id;
	plane.Attack_MinHp=__DeadHitPoints;
	plane.Attack_IsGag=false;
	plane.Attack_GagHexX=0;
	plane.Attack_GagHexY=0;
	plane.Attack_LastHexX=target.HexX;
	plane.Attack_LastHexY=target.HexY;   
	
	plane.Run=true;
	
	return npc.AddPlane(plane);
}

bool AddAttackPlane(Critter&npc,uint priority,uint critId)
{
	Critter@target=GetCritter(critId);
	if(!(@target!=null))
	{
		Log("Target not found.");
		return false;
	}
	
	NpcPlane@plane=CreatePlane();
	plane.Type=(1);
	plane.Priority=(priority==0?(50):priority);
	plane.Attack_TargId=target.Id;
	plane.Attack_MinHp=__DeadHitPoints;
	plane.Attack_IsGag=false;
	plane.Attack_GagHexX=0;
	plane.Attack_GagHexY=0;
	plane.Attack_LastHexX=target.HexX;
	plane.Attack_LastHexY=target.HexY;   
	
	plane.Run=true;
	
	return npc.AddPlane(plane);
}

bool AddAttackPlane(Critter&npc,uint priority,Critter&target,int minHp)
{
	NpcPlane@plane=CreatePlane();
	plane.Type=(1);
	plane.Priority=(priority==0?(50):priority);
	plane.Attack_TargId=target.Id;
	plane.Attack_MinHp=minHp;
	plane.Attack_IsGag=false;
	plane.Attack_GagHexX=0;
	plane.Attack_GagHexY=0;
	plane.Attack_LastHexY=target.HexY;
	plane.Attack_LastHexX=target.HexX;   
	
	plane.Run=true;
	
	return npc.AddPlane(plane);
}

bool AddAttackPlane(Critter&npc,uint priority,uint critId,int minHp)
{
	Critter@target=GetCritter(critId);
	if(!(@target!=null))
	{
		Log("Target not found.");
		return false;
	}
	
	NpcPlane@plane=CreatePlane();
	plane.Type=(1);
	plane.Priority=(priority==0?(50):priority);
	plane.Attack_TargId=target.Id;
	plane.Attack_MinHp=minHp;
	plane.Attack_IsGag=false;
	plane.Attack_GagHexX=0;
	plane.Attack_GagHexY=0;
	plane.Attack_LastHexX=target.HexX;
	plane.Attack_LastHexY=target.HexY;   
	
	plane.Run=true;
	
	return npc.AddPlane(plane);
}

bool AddAttackPlane(Critter&npc,uint priority,Critter&target,bool run)
{
	NpcPlane@plane=CreatePlane();
	plane.Type=(1);
	plane.Priority=(priority==0?(50):priority);
	plane.Attack_TargId=target.Id;
	plane.Attack_MinHp=__DeadHitPoints;
	plane.Attack_IsGag=false;
	plane.Attack_GagHexX=0;
	plane.Attack_GagHexY=0;
	plane.Attack_LastHexX=target.HexX;
	plane.Attack_LastHexY=target.HexY;
	plane.Run=run;
	return npc.AddPlane(plane);
}

bool AddAttackPlane(Critter&npc,uint priority,uint critId,bool run)
{
	Critter@target=GetCritter(critId);
	if(!(@target!=null))
	{
		Log("Target not found.");
		return false;
	}
	
	NpcPlane@plane=CreatePlane();
	plane.Type=(1);
	plane.Priority=(priority==0?(50):priority);
	plane.Attack_TargId=target.Id;
	plane.Attack_MinHp=__DeadHitPoints;
	plane.Attack_IsGag=false;
	plane.Attack_GagHexX=0;
	plane.Attack_GagHexY=0;
	plane.Attack_LastHexX=target.HexX;
	plane.Attack_LastHexY=target.HexY;
	plane.Run=run;
	return npc.AddPlane(plane);
}

bool AddAttackPlane(Critter&npc,uint priority,Critter&target,int minHp,bool run)
{
	NpcPlane@plane=CreatePlane();
	plane.Type=(1);
	plane.Priority=(priority==0?(50):priority);
	plane.Attack_TargId=target.Id;
	plane.Attack_MinHp=minHp;
	plane.Attack_IsGag=false;
	plane.Attack_GagHexX=0;
	plane.Attack_GagHexY=0;
	plane.Attack_LastHexX=target.HexX;
	plane.Attack_LastHexY=target.HexY;
	plane.Run=run;
	return npc.AddPlane(plane);
}

bool AddAttackPlane(Critter&npc,uint priority,uint critId,int minHp,bool run)
{
	Critter@target=GetCritter(critId);
	if(!(@target!=null))
	{
		Log("Target not found.");
		return false;
	}
	
	NpcPlane@plane=CreatePlane();
	plane.Type=(1);
	plane.Priority=(priority==0?(50):priority);
	plane.Attack_TargId=target.Id;
	plane.Attack_MinHp=minHp;
	plane.Attack_IsGag=false;
	plane.Attack_GagHexX=0;
	plane.Attack_GagHexY=0;
	plane.Attack_LastHexX=target.HexX;
	plane.Attack_LastHexY=target.HexY;
	plane.Run=run;
	return npc.AddPlane(plane);
}

bool AddPickPlane(Critter&npc,uint priority,uint16 hexX,uint16 hexY,uint16 protoId,uint useItemId,bool toOpen)
{
	NpcPlane@plane=CreatePlane();
	plane.Type=(3);
	plane.Priority=(priority==0?(35):priority);
	plane.Pick_HexX=hexX;
	plane.Pick_HexY=hexY;
	plane.Pick_Pid=protoId;
	plane.Pick_UseItemId=useItemId;
	plane.Pick_ToOpen=toOpen;
	plane.Run=false;
	return npc.AddPlane(plane);
}

bool AddPickPlane(Critter&npc,uint priority,Item@item,uint useItemId,bool toOpen)
{
	NpcPlane@plane=CreatePlane();
	plane.Type=(3);
	plane.Priority=(priority==0?(35):priority);
	plane.Pick_HexX=item.HexX;
	plane.Pick_HexY=item.HexY;
	plane.Pick_Pid=item.GetProtoId();
	plane.Pick_UseItemId=useItemId;
	plane.Pick_ToOpen=toOpen;
	plane.Run=false;
	return npc.AddPlane(plane);
}

bool AddPickPlane(Critter&npc,uint priority,Item@item,uint useItemId,bool toOpen,bool run)
{
	NpcPlane@plane=CreatePlane();
	plane.Type=(3);
	plane.Priority=(priority==0?(35):priority);
	plane.Pick_HexX=item.HexX;
	plane.Pick_HexY=item.HexY;
	plane.Pick_Pid=item.GetProtoId();
	plane.Pick_UseItemId=useItemId;
	plane.Pick_ToOpen=toOpen;
	plane.Run=run;
	return npc.AddPlane(plane);
}

uint EraseAttackPlane(Critter&npc,uint priority,Critter&target)
{
	return EraseAttackPlane(npc,priority,target.Id);
}

uint EraseAttackPlane(Critter&npc,uint priority,uint critId)
{
	array<NpcPlane@>planes;
	uint count=npc.GetPlanes(planes);
	if(count==0)
	return 0;
	uint erased=0;
	
	for(uint i=0;i<count;i++)
	{
		if(planes[i].Attack_TargId==critId&&npc.ErasePlane(i-erased))
		erased++;
	}
	
	return erased;
}

bool AddHealCritterPlane(Critter&npc,uint priority,Critter@target,bool run)
{
	if(!(@target!=null))
	return false;
	return AddWalkPlane(npc,priority,(33),target.Id,target.HexX,target.HexY,npc.Id==target.Id?npc.Dir:0xFF,run,1);
}

bool AddDoctorCritterPlane(Critter&npc,uint priority,Critter@target,bool run)
{
	if(!(@target!=null))
	return false;
	return AddWalkPlane(npc,priority,(34),target.Id,target.HexX,target.HexY,npc.Id==target.Id?npc.Dir:0xFF,run,1);
}      

