//
// FOnline: 2238
// Rotators
//
// skills.fos
//

// This script contains global handlers for use of some skills.

#include "_macros.fos"
#include "MsgStr.h"
#include "utils_h.fos"
#include "reputations_h.fos"
#include "backend_h.fos"

import bool TryRepairItem(Critter& cr, Item& item) from "repair";
import int  GetActualMaxHp(Critter@ cr) from "utils";
Item@ SelectSkillItem(Critter& cr, Item@ item, uint16 skill)
{
    Item@ handItem = _CritGetItemHand(cr);
    if(valid(handItem) && handItem.Proto.Misc_ToolSkillNum == skill)
        return handItem;
    return item;
}

bool _CritAtLeastOneLimbNotOnFull(Critter& cr)
{
    int maxHp = cr.StatBase[ST_MAX_LIFE] / (cr.Perk[PE_IRON_GRIP] == 1 ? 1 : 2);
    return cr.Stat[ST_HP_HEAD] < maxHp && cr.Stat[ST_HP_LA] < maxHp && cr.Stat[ST_HP_RA] < maxHp && cr.Stat[ST_HP_LL] < maxHp && cr.Stat[ST_HP_RL] < maxHp;
}

bool UseFirstAidOnCritter(Critter& cr, Critter& targetCr, Item@ item)
{
/*
    if(valid(cr.GetMap()) && cr.GetMap().IsTurnBased())
    {
        cr.Say(SAY_NETMSG, "This skill cannot be used during turn-based combat.");
        return true;
    }
*/

    bool is_self = (targetCr.Id == cr.Id);

    if(targetCr.IsDead())
    {
        cr.SayMsg(SAY_NETMSG, TEXTMSG_GAME, STR_SKILL_NORESSURECT);
        return true;
    }

    if(!_CritNeedFirstAid(targetCr) && !_CritAtLeastOneLimbNotOnFull(targetCr))
    {
        if(_CritNeedDoctor(targetCr))
            cr.SayMsg(SAY_NETMSG, TEXTMSG_GAME, STR_SKILL_NOFIRSTAID_NEEDDOCTOR);
        else if(is_self)
            cr.SayMsg(SAY_NETMSG, TEXTMSG_GAME, STR_SKILL_NONEED_FIRSTAID);
        return true;
    }

    if(cr.Timeout[TO_SK_FIRST_AID] > 0)
    {
        if(cr.IsPlayer())
            cr.SayMsg(SAY_NETMSG, TEXTMSG_GAME, STR_SKILL_WEARINESS);
        return true;
    }

    if(!is_self && cr.Param[MODE_HIDE] != 0 && cr.GetAccess() < ACCESS_TESTER)
        cr.ParamBase[MODE_HIDE] = 0;

	int toolBonus = 0;
	
    @item = SelectSkillItem(cr, item, SK_FIRST_AID);
    if(valid(item))
    {
		toolBonus = item.Proto.Misc_ToolSkillBonus;
        if(Random(0, 30) == 0)
		{
            cr.DeleteItem(item.GetProtoId(), 1);
			cr.Say(SAY_NETMSG, "You ran out of medical supplies after healing yourself.");		// First Aid Kit broke
		}
    }

    int healerBonus = (cr.Perk[PE_HEALER] >= 1 ? 50 : 0) + (cr.Perk[PE_HEALER] == 2 ? 100 : 0);
    int heal = cr.Skill[SK_FIRST_AID] + healerBonus + toolBonus;

	heal = (heal * ((100 - CLAMP(targetCr.Stat[ST_POISONING_LEVEL],0,100)))) / 100;
    int curHp = targetCr.Stat[ST_CURRENT_HP];
    int maxHp = GetActualMaxHp(targetCr);
    targetCr.StatBase[ST_HP_HEAD] += heal / 4;
    targetCr.StatBase[ST_HP_LA] += heal / 4;
    targetCr.StatBase[ST_HP_RA] += heal / 4;
    targetCr.StatBase[ST_HP_LL] += heal / 4;
    targetCr.StatBase[ST_HP_RL] += heal / 4;
    if(curHp + heal > maxHp)
        heal = maxHp - curHp;
    targetCr.StatBase[ST_CURRENT_HP] += heal;


    if(is_self)
        VerboseAction(cr, "patches wounds");
    else
        VerboseAction(cr, targetCr, "treats wounds of TARGET");
    cr.Say(SAY_NETMSG, "Hit Points +" + heal);
    if(!is_self)
        targetCr.Say(SAY_NETMSG, "Hit Points +" + heal);

    _SetTimeout(cr, TO_SK_FIRST_AID, REAL_SECOND(90/(cr.Perk[PE_MEDIC] > 0 ? 2 : 1) - (toolBonus > 0 ? 5 : 0) ));

    cr.StatBase[ST_EXPERIENCE] += heal * 3*(GetGvar(GVAR_experience_multipler));
    if(_IsTrueNpc(targetCr) && cr.Id != targetCr.Id && IsHumanoid(targetCr) && !IsCurrentEnemy(targetCr, cr.Id))
    {
        if(_ValidReputationIndex(targetCr.Stat[ST_TEAM_ID]))
            AddReputation(cr, targetCr.Stat[ST_TEAM_ID], heal / 20, REP_FIRST_AID_CAP);
        if(cr.IsSeenBy(targetCr))
            targetCr.Say(SAY_NORM_ON_HEAD, "Thank you.");
    }

    if(cr.IsPlayer())
    {
        LogExperience(cr, heal * 3*(GetGvar(GVAR_experience_multipler)), SK_FIRST_AID, targetCr.GetProtoId());
        AddScore(cr, SCORE_DOCTOR, 1);
    }

    return true;
}

bool UseDoctorOnCritter(Critter& cr, Critter& targetCr, Item@ item)
{
/*
    if(valid(cr.GetMap()) && cr.GetMap().IsTurnBased())
    {
        cr.Say(SAY_NETMSG, "This skill cannot be used during turn-based combat.");
        return true;
    }
*/

    bool is_self = (targetCr.Id == cr.Id);

    if(targetCr.IsDead())
    {
        cr.SayMsg(SAY_NETMSG, TEXTMSG_GAME, STR_SKILL_NORESSURECT);
        return true;
    }

    //if((!_CritNeedDoctor(targetCr)) && !targetCr.IsKnockout() )
    if((!_CritNeedDoctor(targetCr) && !_CritAtLeastOneLimbNotOnFull(targetCr)) && (cr.Perk[PE_MEDIC] == 0 || !targetCr.IsKnockout()))   //version with Medic perk required to remove KO
    {
        if(_CritNeedFirstAid(targetCr))
            cr.SayMsg(SAY_NETMSG, TEXTMSG_GAME, STR_SKILL_NODOCTOR_NEEDFIRSTAID);
        else if(is_self)
            cr.SayMsg(SAY_NETMSG, TEXTMSG_GAME, STR_SKILL_NONEED_DOCTOR);
        return true;
    }

    if(cr.Timeout[TO_SK_DOCTOR] > 0)
    {
        if(cr.IsPlayer())
            cr.SayMsg(SAY_NETMSG, TEXTMSG_GAME, STR_SKILL_WEARINESS);
        return true;
    }

    if(!is_self && cr.Param[MODE_HIDE] != 0 && cr.GetAccess() < ACCESS_TESTER)
        cr.ParamBase[MODE_HIDE] = 0;

    int sk = cr.Skill[SK_DOCTOR];
    int toolBonus = 0;

    @item = SelectSkillItem(cr, item, SK_DOCTOR);
    if(valid(item))
    {
        toolBonus += item.Proto.Misc_ToolSkillBonus;
        if(Random(0, 30) == 0)
            cr.DeleteItem(item.GetProtoId(), 1);
    }
    sk += toolBonus;
    int heal = ((sk + (cr.Perk[PE_HEALER] >= 1 ? 50 : 0) + (cr.Perk[PE_HEALER] == 2 ? 100 : 0)) * CLAMP(100 - cr.Stat[ST_POISONING_LEVEL], 0, 100)) / 100;

    int uninjured = 0;
    int injured = 0;

    for(int i = DAMAGE_EYE; i <= DAMAGE_LEFT_LEG; ++i)
    {
        if(!_CritHasInjureBody(targetCr, i))
            continue;
        injured++;
        if(sk >= 100)
        {
            _CritUninjureBody(targetCr, i);
            cr.SayMsg(SAY_NETMSG, TEXTMSG_GAME, STR_SKILL_HEAL_DMG(i - DAMAGE_POISONED));
            uninjured++;
            sk -= 100;
        }
        else
        {
            cr.SayMsg(SAY_NETMSG, TEXTMSG_GAME, STR_SKILL_NOHEAL_DMG(i - DAMAGE_POISONED));
        }
    }

    //if(targetCr.IsKnockout())
    if(targetCr.IsKnockout() && cr.Perk[PE_MEDIC] != 0 )      //version with Medic perk required to remove KO
    {
        targetCr.StatBase[ST_CURRENT_AP] = 0;
    }

	//druto
	_SetTimeout(cr, TO_SK_DOCTOR, REAL_SECOND(80/(cr.Perk[PE_MEDIC] > 0 ? 2 : 1) - (toolBonus > 0 ? 5 : 0) ));

    if(uninjured > 0)
    {
        if(is_self)
            VerboseAction(cr, "applies wound dressing" + (uninjured > 1 ? "s" : ""));
        else
            VerboseAction(cr, targetCr, "treats injur" + (uninjured > 1 ? "ies" : "y") + " of TARGET");
        cr.StatBase[ST_EXPERIENCE] += uninjured * 50*(GetGvar(GVAR_experience_multipler));
        if(_IsTrueNpc(targetCr) && !is_self && IsHumanoid(targetCr) && !IsCurrentEnemy(targetCr, cr.Id))
        {
            if(_ValidReputationIndex(targetCr.Stat[ST_TEAM_ID]))
                AddReputation(cr, targetCr.Stat[ST_TEAM_ID], uninjured * 8, REP_DOCTOR_CAP);
            if(cr.IsSeenBy(targetCr))
                targetCr.Say(SAY_NORM_ON_HEAD, "Thank you.");
        }
    }
    else
    {
        /*if( is_self )
                VerboseAction( cr, "TODO uninjured=0 is_self" );
           else
                VerboseAction( cr, targetCr, "TODO uninjured=0 TARGET" );*/
    }

    targetCr.StatBase[ST_HP_HEAD] += heal;
    targetCr.StatBase[ST_HP_LA] += heal;
    targetCr.StatBase[ST_HP_RA] += heal;
    targetCr.StatBase[ST_HP_LL] += heal;
    targetCr.StatBase[ST_HP_RL] += heal;
    targetCr.StatBase[ST_POISONING_LEVEL] = CLAMP(targetCr.Stat[ST_POISONING_LEVEL]-((heal*15)/100), 0, 100);

    if(cr.IsPlayer())
    {
        LogExperience(cr, uninjured * 50, SK_DOCTOR, targetCr.GetProtoId());
        AddScore(cr, SCORE_DOCTOR, uninjured);
    }
    return true;
}
