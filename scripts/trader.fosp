

import void InitLogs()from"logging";
import void FLog(uint logindex,string&text)from"logging";
import void ILog(string&section,string&text)from"logging";
import void GMLog(Critter&cr,string&text)from"logging";
import void CloseLogs()from"logging";
import uint AddLog(string&filename)from"logging";
import uint AddLog(string&filename,uint index)from"logging";                                                        

import void WLog(string&type,string&message)from"debug";
import void WLog(string&type,string&message,int level)from"debug";
import void InitDebug()from"debug";          

import void InitEconomy()from"economy";
import void SendLevelThresholds(Critter&)from"economy"; 

import bool BankAccountExists(uint bankid,uint account)from"economy";
import bool BankAccountRemoveMoney(uint bankid,uint account,uint amount)from"economy";
import bool BankHasAccess(uint bankid,uint account,uint playerid)from"economy";
import int BankGetAccountBalance(uint bankid,uint account)from"economy";
import int BankGetAccountID(uint bankid,uint playerid)from"economy";
import uint BankAddAccess(uint bankid,uint account,uint playerid)from"economy";
import uint BankCreateAccount(uint bankid,uint playerid)from"economy";
import uint BankDepositMoney(uint bankid,uint playerid,uint account,int amount)from"economy";
import uint BankGetAccessCount(uint bankid,uint account)from"economy";
import uint BankGetAccountOwner(uint bankid,uint account)from"economy";
import uint BankGetAccountType(uint bankid,uint account)from"economy";
import uint BankGetCreditRating(uint bankid,uint account)from"economy";
import uint BankGetLoan(uint bankid,uint account)from"economy";
import uint BankRemoveAccess(uint bankid,uint account,uint playerid)from"economy";
import uint BankSetAccountType(uint bankid,uint account,uint accounttype)from"economy";
import uint BankSetCreditRating(uint bankid,uint account,uint rating)from"economy";
import uint BankSetLoan(uint bankid,uint account,uint loan)from"economy";
import uint BankTakeLoan(uint bankid,uint account,uint amount)from"economy";
import uint BankTransferMoney(uint bankid,uint fromaccount,uint toaccount,uint amount)from"economy";
import uint BankWithdrawMoney(uint bankid,uint playerid,uint account,int amount)from"economy"; 

import bool BanksTransferFromCritter(Critter&critter,uint amount,uint type,bool virtual)from"economy";
import bool BanksTransferToCritter(Critter&critter,uint amount,uint type,bool virtual)from"economy";
import uint BanksGetTotalMoney()from"economy";
import void BanksAddMoney(uint amount)from"economy";
import void BanksRemoveMoney(uint amount)from"economy"; 

import bool BankAddMoney(uint bankid,uint amount)from"economy";
import bool BankRemoveMoney(uint bankid,uint amount)from"economy";
import bool BankSetMoney(uint bankid,uint amount)from"economy";
import uint BankGetLoanInterest(uint bankid)from"economy";
import uint BankGetNumberOfAccounts(uint bankid)from"economy";
import float BankGetSaveInterest(uint bankid)from"economy";
import uint BankGetTotalMoney(uint bankid)from"economy";
import uint BankGetTotalBalance(uint bankid)from"economy";
import float BankGetReserveRatio(uint bankid)from"economy";
import uint BankSetLoanInterest(uint bankid,uint interest)from"economy";
import uint BankSetSaveInterest(uint bankid,float interest)from"economy";
import bool BankTransferFromCritter(uint bankId,Critter&critter,uint amount,uint type,bool virtual)from"economy";

import void SaveBankData()from"economy";   

import int GetItemSellModifier(Critter&player,Critter&trader)from"economy";
import int GetItemBuyModifier(Critter&player,Critter&trader)from"economy";
import uint GetItemCost(Item&item,Critter&cr,Critter&trader,bool sell)from"economy";
import uint GetItemCostPlain(Item&item,Critter&cr,Critter&trader)from"economy";

import array<int>GetTraderLevels(Critter@npc)from"economy";
import uint GetTraderLevel(Critter@npc,uint type)from"economy";

import uint ItemLevel(Item&item)from"economy";
import uint ItemLevel(uint pid)from"economy";
import uint TraderCapacity(Critter@npc)from"economy";
import uint TraderCapacity(Critter@npc,uint type,uint level)from"economy";
import uint TraderMoneyCapacity(Critter@npc)from"economy";
import uint TradingItemType(Item&item)from"economy";
import uint TradingItemType(uint pid)from"economy";                                                                                                          

const string@FD_Bank_Result2String(uint res)
{
	if(res==(1))
	return"FD_BANK_RESULT_SUCCESS";
	else if(res==(2))
	return"FD_BANK_RESULT_UNKNOWN";
	else if(res==(3))
	return"FD_BANK_RESULT_TOO_MANY_ACCOUNTS";
	else if(res==(4))
	return"FD_BANK_RESULT_ALREADY_HAS_ACCOUNT";
	else if(res==(5))
	return"FD_BANK_RESULT_NOT_ENOUGH_MONEY";
	else if(res==(6))
	return"FD_BANK_RESULT_BANK_FULL";
	else if(res==(7))
	return"FD_BANK_RESULT_BANK_EMPTY";
	else if(res==(8))
	return"FD_BANK_RESULT_DATA_ERROR";
	else if(res==(9))
	return"FD_BANK_RESULT_INVALID_PLAYER";
	else if(res==(10))
	return"FD_BANK_RESULT_NO_ACCOUNT";
	else
	return"FD_Result: Unknown error code";
}                                                                                                                                                                                                                                                                                                                                                                                          

import Location@GetLocationOf(Critter&critter)from"utils";
import string GetLocationName(uint locId)from"utils";
import string GetLocationName(Location@loc)from"utils";
import bool ReadPids(array<int>&out pids,bool removeinvalid)from"utils";
import void ReadDefines(string@fileName,dictionary&items,array<string>@defines)from"utils";
import bool ParseDefine(const string&in line,string&out spid,int&out id)from"utils";
import int SkipWhitespaces(const string&in str,int start)from"utils";
import int SkipNonWhitespaces(const string&in str,int start)from"utils";
import bool IsParameterTag(string&str)from"utils";
import string GetParameterString(array<string@>@arr,string&parameter)from"utils";
import int GetIndexOfString(array<string@>@arr,string&str)from"utils";
import string GetConcatenatedString(array<string@>@arr,uint startindex,int stopindex)from"utils";
import string GetConditionOfCritter(Critter@cr)from"utils";
import string GetExtConditionOfCritter(Critter@cr)from"utils";
import uint GetAllOnlinePlayers(array<Critter@>&out players)from"utils";
import uint GetAuthenticatedPlayers(array<Critter@>&out players)from"utils";
import uint GetAuthenticatedPlayers(array<Critter@>&out players,bool ignorePriviledges)from"utils";
import uint GetNumberOfPlayersOnline()from"utils";
import void SetTurnBasedAvailability(Location@loc)from"utils";
import bool IsGuarded(Map@map)from"utils";
import bool IsPublic(Map@map)from"utils";
import bool IsEncounterMap(Map@map)from"utils";
import bool IsTown(Map@map)from"utils";
import bool IsDungeon(Map@map)from"utils";
import bool IsBaseControl(Map@map)from"utils";

import uint GetMapType(Map@map)from"utils";
import void LockDoor(uint x,uint y,Map@map,uint complexity,uint lockid)from"utils";
import void UnlockDoor(uint x,uint y,Map@map)from"utils";
import void ClearContainer(Item@container)from"utils";
import void MoveItemsCritterToCont(Critter&crFrom,Item&contTo,uint specid)from"utils";
import string GetCritterInfo(Critter&cr)from"utils";
import bool AddExpTeam(Critter&critter,int xp)from"utils";
import void ClearEnemyStack(Critter&critter)from"utils";
import void ClearEnemyStacksOnMap(Map@map)from"utils";
import bool IsCurrentEnemy(Critter&cr,uint targetId)from"utils";
import string@GetSafePlayerName(uint id)from"utils";
import string GetSafePlayerName(uint id,string&onSuccess,string&onError)from"utils";
import IDateTime@GetCurrentDateTime()from"utils";
import string GetCurrentDateTimeString()from"utils";
import string GetCurrentDateTimeString(bool date,bool time)from"utils";
import Critter@GetMostSkilled(array<Critter@>@group,int skill)from"utils";
import string GetAuthString(Critter&player)from"utils";
import string GetAuthString(int accesslevel)from"utils";
import bool CanRequestHelp(Critter&player)from"utils";
import void SetRequestedHelp(Critter&player)from"utils";
import void SetRequestedHelp(Critter&player,int minutes)from"utils";
import Critter@GetOnlineGM()from"utils";
import void Preprocess(Critter&player,string&commandString)from"utils";
import bool IsHumanoid(Critter@cr)from"utils";
import uint GetGroupIndex(Critter&cr)from"utils";
import uint GetGroupIndex(int st)from"utils";
import void SetGroupIndex(Critter&cr,uint val)from"utils";
import uint GetGroupRank(Critter&cr)from"utils";
import void SetGroupRank(Critter&cr,uint val)from"utils";
import uint GetGroupMode(Critter&cr)from"utils";
import void SetGroupMode(Critter&cr,uint val)from"utils";
import void SetGroupInfo(Critter&cr,uint faction,uint rank,uint mode)from"utils";
import void SetGroupInfoPack(Critter&cr,uint packInfo)from"utils";
import void ClearEvents(Critter&cr)from"utils";

import int GetGvar(uint gvar)from"utils";
import void SetGvar(uint gvar,uint value)from"utils";
import int GetLLvar(Location&location,uint llvar)from"utils";
import int GetLLvar(uint locationId,uint llvar)from"utils";
import void SetLLvar(Location&location,uint llvar,uint value)from"utils";
import int GetLMvar(Map&map,uint llvar)from"utils";
import int GetLMvar(uint mapId,uint llvar)from"utils";
import void SetLMvar(Map&map,uint llvar,uint value)from"utils";
import int GetLIvar(Item&item,uint llvar)from"utils";
import int GetLIvar(uint itemId,uint llvar)from"utils";
import void SetLIvar(Item&item,uint llvar,uint value)from"utils";
import int GetLvar(Critter&critter,uint lvar)from"utils";
import int GetLvar(uint id,uint lvar)from"utils";
import void SetLvar(Critter&critter,uint lvar,uint value)from"utils";
import void SetLvar(uint id,uint lvar,uint value)from"utils";
import int GetUvar(uint uvar,uint key,uint index)from"utils";
import void SetUvar(uint uvar,uint key,uint index,uint value)from"utils";

import uint GetContainerValue(Item@container)from"utils";
import uint BaseItemValue(uint pid,bool ammo)from"utils";
import uint BaseItemValue(uint pid,uint broken,uint det,bool ammo)from"utils";
import uint BaseItemValue(Item@item)from"utils";
import uint BaseItemValue(Item@item,uint proc)from"utils";
import uint BaseSingleItemValue(Item@item)from"utils";
import uint BaseSingleItemValue(Item@item,uint proc)from"utils";

import void SetBloodType(Critter@cr)from"utils";
import string GetBloodType(Critter@cr)from"utils";
import string GetBloodRandom()from"utils";

import void LogCommandUsage(Critter&player,string&commandString)from"utils";
import void DropTimeouts(Critter&cr)from"utils";

import bool HasItem(Critter@cr,uint pid)from"utils";
import bool HasSomeWeapon(Critter@cr)from"utils";
import uint GetBestWeaponSkill(Critter@cr)from"utils";
import void GiveBag(uint bag,Critter@cr)from"utils";
import void SetQuestGarbager(uint time,uint playerid,uint locid,uint var,uint val)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,bool isMob,uint level)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,uint factionRank,uint factionMode,bool isMob,uint level)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,array<int>params,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,bool isMob,uint level)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,array<int>params,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,uint factionRank,uint factionMode,bool isMob,uint level)from"utils";
import void AddScore(Critter@cr,uint score,uint points)from"utils";

import bool ReloadWeapon(Critter&cr)from"utils";
import Item@GetRadio(Critter&cr)from"utils";
import Item@GetRepairTool(Critter&cr)from"utils";
import Item@GetEquippedItem(Critter&cr,uint Pid)from"utils";
import Item@GetEquippedItem(Critter&cr,array<uint>&Pids)from"utils";
import Item@GetEquippedItemByType(Critter&cr,uint ItemType)from"utils"; 

import bool SkillRoll(Critter@cr,int skill,int bonus)from"utils";
import int SkillCheck(Critter&cr,int skill,int skillused,Item@item,int bonus)from"utils";
import string SkillName(uint8 skill)from"utils";
import void ChangeCrTypeSafe(Critter&cr,uint8 crType)from"utils";

import bool Pickable(Item@item)from"utils";

import void TransferItemsToContOnMap(Critter&cr,Map@map,int entid,int contpid,int itemtypes)from"utils";
import void TransferItemsFromContOnMap(Critter&cr,Map@map,int entid,int contpid)from"utils";

import string IpToString(uint ip)from"utils";

import void VerboseAction(Critter&cr,string&text)from"utils";
import void VerboseAction(Critter&cr,Critter&target,string&text)from"utils";
import void VerboseExperience(Critter&cr,int xpDiff,int levelDiff)from"utils";

import void SetChosenActions(Critter&cr,array<int>&actions)from"utils";

import void HexLine(uint16 x0,uint16 y0,uint16 x1,uint16 y1,array<uint16>@xList,array<uint16>@yList)from"utils";
import void HexCircle(uint16 x0,uint16 y0,uint16 radius,array<uint16>@xList,array<uint16>@yList)from"utils";

import void StartPersonalDataCleanup()from"utils";

import bool IsPersonalData(Location&location,string&name)from"utils";
import bool GetPersonalData(Location&location,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Location&location,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Location&location,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Location&location,string&name)from"utils";

import bool IsPersonalData(Map&map,string&name)from"utils";
import bool GetPersonalData(Map&map,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Map&map,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Map&map,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Map&map,string&name)from"utils";

import bool IsPersonalData(Critter&critter,string&name)from"utils";
import bool GetPersonalData(Critter&critter,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Critter&critter,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Critter&critter,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Critter&critter,string&name)from"utils";

import bool IsPersonalData(Item&item,string&name)from"utils";
import bool GetPersonalData(Item&item,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Item&item,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Item&item,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Item&item,string&name)from"utils";

import bool FindPreferredGridApprox(Map&map,uint16&hx,uint16&hy)from"utils";           

import bool StrToInt(string@s,uint64&inout val)from"strtoint";
import bool StrToInt(string@s,uint&inout val)from"strtoint";
import bool StrToInt(string@s,uint16&inout val)from"strtoint";
import bool StrToInt(string@s,uint8&inout val)from"strtoint";
import bool StrToInt(string@s,int64&inout val)from"strtoint";
import bool StrToInt(string@s,int16&inout val)from"strtoint";
import bool StrToInt(string@s,int8&inout val)from"strtoint";    

import int FindInArray(array<int>&arr,int value)from"utils";
import int FindInArray(array<uint>&arr,uint value)from"utils";
import int FindInArray(array<uint16>&arr,uint16 value)from"utils";
import int FindInArray(array<uint8>&arr,uint8 value)from"utils";
import bool FindInArray(array<int>&arr,int id,int&index)from"utils";
import bool FindInArray(array<uint>&arr,uint id,int&index)from"utils";
import bool FindInArray(array<uint8>&arr,uint8 id,int&index)from"utils";
import int FindInArray(array<string>&arr,string&value)from"utils";
import int FindInArray(array<string@>@arr,string&value)from"utils";
import bool Present(int what,array<int>&where)from"utils";
import bool Present(uint what,array<uint>&where)from"utils";
import bool Present(uint16 what,array<uint16>&where)from"utils";
import bool Present(string&what,array<string>&where)from"utils";
import bool Present(string&what,array<string@>@where)from"utils";

import uint CreateLocationForGroup(Critter&player,uint16 pid,uint16 worldX,uint16 worldY,array<Critter@>&)from"utils";
import bool FindFirstFreeHex(Map@map,uint16&x,uint16&y,uint8 dir,uint16 maxSteps)from"utils";
import bool FindNearestFreeHex(Map&map,uint16&x,uint16&y,uint radius)from"utils";

import bool GetItemCoordinates(Item&item,uint&mapID,uint16&x,uint16&y)from"utils";
import bool ItemOnHex(uint16 pid,Map@map,uint16 x,uint16 y)from"utils";

import void PrintCallstack()from"utils";
import void PrintCallstack(int level)from"utils";

import bool LocationHasCritters(Location&loc,uint findType)from"utils";
import uint LocationGetCritters(Location&loc,uint findType,array<Critter@>@critters)from"utils";
import uint LocationGetPlayersAndFollowers(Location&loc,uint findType,array<Critter@>@critters)from"utils";
import uint MapGetPlayersAndFollowers(Map&map,uint findType,array<Critter@>@critters)from"utils";
import uint CritterGetPlayersAndFollowers(Critter&critter,bool lookOnMe,uint findType,array<Critter@>@critters)from"utils";
import bool LocationHasItems(Location&loc,uint16 protoId)from"utils";
import uint LocationGetItems(Location&loc,uint16 protoId,array<Item@>@items)from"utils";
import void LocationDeleteItems(Location&loc,uint16 protoId)from"utils";

import bool IsDisposableEncounter(Location@loc)from"utils";

import bool IsT4Item(Item&item)from"utils";
import bool IsT3Item(Item&item)from"utils";
import uint16 AddT3Item()from"utils";
import uint16 AddT4Item()from"utils";
import uint16 AddImplant()from"utils";
import uint16 AddT4BP()from"utils";
import uint16 AddRareAmmo()from"utils";
import uint16 AddTypicalAmmo()from"utils";

import void SetDeterioration(Item&item)from"utils";  

shared class CPosition
{
	uint x;
	uint y;
	uint dir;
};

shared interface IRect
{
	bool IsWithin(Critter&cr);
};

shared class Rect:IRect
{
	uint x1;
	uint y1;
	uint x2;
	uint y2;
	
	Rect(uint x1,uint y1,uint x2,uint y2)
	{
		this.x1=x1;
		this.y1=y1;
		this.x2=x2;
		this.y2=y2;
	}
	
	bool IsWithin(Critter&cr)
	{
		return((cr.HexX>=this.x1&&cr.HexX<=this.x2)&&(cr.HexY>=this.y1&&cr.HexY<=this.y2));
	}
};

shared interface IDateTime
{
	uint16 get_Year();
	uint16 get_Month();
	uint16 get_DayOfWeek();
	uint16 get_Day();
	uint16 get_Hour();
	uint16 get_Minute();
	uint16 get_Second();
	uint16 get_Milliseconds();
	string@ToString();
}

shared interface IBroadcastBuffer
{
	string GetString();
	
	void SetType(int type);
	int GetType();
	void SetTime(int time);
	int GetTime();
	void SetSetup(int setup);
	int GetSetup();
	void SetMessage(string message);
	void AppendMessage(string message);
	string GetMessage();
	void SetData(array<int>data);
	
	void SetStart(int time);
	void ResetStart();
	
	void SetLifetime(int lifetime);
	
	void SetFilters(int filters);
	void SetFilter(int filter);
	void SetFilter(int filter,int data);
	void UnsetFilter(int filter);
	bool Filter(int filter);
	bool CheckFilters(Critter@player);
	
	bool Send(Critter@player);
	uint SendToAll();
	
	void SetGM(int id);
	void UnsetGM();
	
	void ToDelete();
};  

import void UpdateBroadcast()from"broadcast";

import IBroadcastBuffer@AddBroadcastBuffer(int type,int time,int setup,string&message,array<int>&data,int lifetime,int flags)from"broadcast";
import void DumpBroadcastBuffer(Critter@player)from"broadcast";
import uint FindBroadcastBufferByType(int type,array<IBroadcastBuffer@>&buf)from"broadcast";
import uint FindBroadcastBufferByGM(int id,array<IBroadcastBuffer@>&buf)from"broadcast"; 

import IBroadcastBuffer@Broadcast_Message(string&message,int time,int filters,bool send)from"broadcast";
import IBroadcastBuffer@Broadcast_Message(string&message,int time,int filters)from"broadcast";
import IBroadcastBuffer@Broadcast_Message(string&message,int&time)from"broadcast";
import IBroadcastBuffer@Broadcast_Message(string&message,bool send)from"broadcast";
import IBroadcastBuffer@Broadcast_Message(string&message)from"broadcast"; 

import void Broadcast_TownControl_Set(string&message,int location,int time,int faction)from"broadcast";
import void Broadcast_TownControl_Set(int location,int time,int faction,Critter&player)from"broadcast";
import void Broadcast_TownControl_Stop(int location)from"broadcast"; 

import IBroadcastBuffer@Broadcast_Influence(int location,int time,string&message)from"broadcast"; 

import uint Broadcast_RequestHelp(Critter@player,string&message)from"broadcast";
import void Broadcast_CheckRequestHelpBuffer(Critter@gm)from"broadcast";
import void Broadcast_DumpRequestHelpBuffer(Critter@gm)from"broadcast"; 

import void baseControl(string msg,int mapId,uint time)from"broadcast";
import void baseControlRadio(string msg,uint time,int mapId,uint factionId)from"broadcast"; 

import void ServerEventMSG(uint time,string msg)from"broadcast"; 

import IBroadcastBuffer@GetEventCountDownBuffer(int location,int type)from"broadcast";
import void ServerEventCNTSet(string message,uint location,uint type,uint time)from"broadcast";
import void ServerEventCNTSet(uint location,uint type,uint time)from"broadcast";
import void ServerEventCNTStop(uint location,uint type)from"broadcast

import void SetLexem(Item&item,string&lex,string&value)from"lexems";

uint BonusNumber(Item@it)
{
	uint number=0;
	if(it.Val5!=0)return 5;
	else if(it.Val4!=0)return 4;
	else if(it.Val3!=0)return 3;
	else if(it.Val2!=0)return 2;
	else if(it.Val1!=0)return 1;
	else return 0;
}

void AddBonusOrNot(Item@it)
{
	if(it.GetType()==(3)&&!it.IsStackable())
	{
		int roll=Random(0,99);
		if(roll>=50)AddWeaponBonus(it,1);
		if(roll>=60)AddWeaponBonus(it,2);
		if(roll>=70)AddWeaponBonus(it,3);
		if(roll>=80)AddWeaponBonus(it,4);
		if(roll>=90)AddWeaponBonus(it,5);
	}
	
	else if(it.GetType()==(1))
	{
		int roll=Random(0,99);
		if(roll>=50)AddArmorBonus(it,1);
		if(roll>=60)AddArmorBonus(it,2);
		if(roll>=70)AddArmorBonus(it,3);
		if(roll>=80)AddArmorBonus(it,4);
		if(roll>=90)AddArmorBonus(it,5);
	}
	return;
}

void AddSpecialBonusLow(Item@it)
{
	if(it.GetType()==(3)&&!it.IsStackable())
	{
		int roll=Random(0,99);
		if(roll>=0)AddWeaponBonus(it,1);
		if(roll>34)AddWeaponBonus(it,2);
		if(roll>59)AddWeaponBonus(it,3);
		if(roll>74)AddWeaponBonus(it,4);
		if(roll>84)AddWeaponBonus(it,5);
	}
	
	else if(it.GetType()==(1))
	{
		int roll=Random(0,99);
		if(roll>=0)AddArmorBonus(it,1);
		if(roll>34)AddArmorBonus(it,2);
		if(roll>59)AddArmorBonus(it,3);
		if(roll>74)AddArmorBonus(it,4);
		if(roll>84)AddArmorBonus(it,5);
	}
	return;
}

void AddSpecialBonus(Item@it)
{
	if(it.GetType()==(3)&&!it.IsStackable())
	{
		AddWeaponBonus(it,1);
		AddWeaponBonus(it,2);
		AddWeaponBonus(it,3);
		AddWeaponBonus(it,4);
		if(Random(0,1)==0)AddWeaponBonus(it,5);
	}
	
	else if(it.GetType()==(1))
	{
		AddArmorBonus(it,1);
		AddArmorBonus(it,2);
		AddArmorBonus(it,3);
		AddArmorBonus(it,4);
		if(Random(0,1)==0)AddArmorBonus(it,5);
	}
	return;
}

void AddBonuses(Item@it,string@crafter)
{
	if(it.GetType()==(3)&&!it.IsStackable())
	{
		int roll=Random(0,99);
		if(roll>55)AddWeaponBonus(it,1,true);
		if(roll>76)AddWeaponBonus(it,2,true);
		if(roll>88)AddWeaponBonus(it,3,true);
		if(roll>95)AddWeaponBonus(it,4,true);
		if(roll==99)AddWeaponBonus(it,5,true);
		SetLexem(it,"$crafter",crafter);
	}
	
	else if(it.GetType()==(1))
	{
		int roll=Random(0,99);
		if(roll>55)AddArmorBonus(it,1);
		if(roll>76)AddArmorBonus(it,2);
		if(roll>88)AddArmorBonus(it,3);
		if(roll>95)AddArmorBonus(it,4);
		if(roll==99)AddArmorBonus(it,5);
		SetLexem(it,"$crafter",crafter);
	}
	return;
} 

void AddBonusHinkley(Item@it)
{
	if(it.GetType()==(3)&&!it.IsStackable())
	{
		int roll=Random(0,99);
		if(roll>=0)AddWeaponBonus(it,1);
		if(roll>34)AddWeaponBonus(it,2);
		if(roll>59)AddWeaponBonus(it,3);
		if(roll>74)AddWeaponBonus(it,4);
	}
	
	else if(it.GetType()==(1))
	{
		int roll=Random(0,99);
		if(roll>=0)AddArmorBonus(it,1);
		if(roll>34)AddArmorBonus(it,2);
		if(roll>59)AddArmorBonus(it,3);
		if(roll>74)AddArmorBonus(it,4);
	}
	return;
}

void AddBonuses(Item@it,int magic)
{
	if(it.GetType()==(3)&&!it.IsStackable())
	{
		if(magic>=1)AddWeaponBonus(it,1,true);
		if(magic>=2)AddWeaponBonus(it,2,true);
		if(magic>=3)AddWeaponBonus(it,3,true);
		if(magic>=4)AddWeaponBonus(it,4,true);
		if(magic>=5)AddWeaponBonus(it,5,true);
	}
	
	else if(it.GetType()==(1))
	{
		if(magic>=1)AddArmorBonus(it,1);
		if(magic>=2)AddArmorBonus(it,2);
		if(magic>=3)AddArmorBonus(it,3);
		if(magic>=4)AddArmorBonus(it,4);
		if(magic>=5)AddArmorBonus(it,5);
	}
	return;
}

void AddArmorBonus(Item@it,int number)
{
	int minRoll=1;
	int maxRoll=1;
	
	uint bonusType=0;
	uint maxBonusType=(123); 
	
	if(it.GetProtoId()>=725&&it.GetProtoId()<=741)maxBonusType=(111); 
	
	do
	{
		bonusType=Random(100,maxBonusType);
	}
	while(HasBonusAlready(it,bonusType));
	
	switch(bonusType)
	{
		
		case(100):{maxRoll=5;break;}
		case(101):{maxRoll=5;break;}
		case(102):{maxRoll=5;break;}
		case(103):{maxRoll=5;break;}
		case(104):{maxRoll=5;break;}
		case(105):{maxRoll=10;break;}
		case(106):{maxRoll=10;break;}
		case(107):{maxRoll=10;break;}
		case(108):{maxRoll=10;break;}
		case(109):{maxRoll=10;break;}
		case(110):{minRoll=-7;maxRoll=-1;break;}
		case(111):{minRoll=-7;maxRoll=-1;break;}
		
		case(112):break;
		case(113):{minRoll=10;maxRoll=30;break;}
		case(114):{minRoll=10;maxRoll=30;break;}
		case(115):break;
		case(116):break;
		case(117):break;
		case(118):break;
		case(119):break;
		case(120):break;
		case(121):break;
		case(122):{minRoll=5;maxRoll=20;break;}
		case(123):{minRoll=1;maxRoll=5;break;}
		default:break;
	} 
	
	int roll=Random(minRoll,maxRoll); 
	
	switch(number)
	{
		case 1:{it.Val0=bonusType;it.Val5=roll;break;}
		case 2:{it.Val1=bonusType;it.Val6=roll;break;}
		case 3:{it.Val2=bonusType;it.Val7=roll;break;}
		case 4:{it.Val3=bonusType;it.Val8=roll;break;}
		case 5:{it.Val4=bonusType;it.Val9=roll;break;}
		default:break;
	}
	
	it.Update();
	return;
} 

void AddWeaponBonus(Item@it,int number,bool isCrafting=false)
{
	
	uint minRoll=1;
	uint maxRoll=1;
	
	uint bonusType=0;
	
	int skillNum=it.Proto.Weapon_Skill_0;
	bool isRangeWeapon=(skillNum==(200)||skillNum==(201)||skillNum==(202));
	
	do
	{
		if(isRangeWeapon)
		bonusType=Random(100,(106));
		else
		bonusType=Random(100,(105));
	}
	while(HasBonusAlready(it,bonusType)||IsBonusExcluded(isCrafting,bonusType));
	
	switch(bonusType)
	{
		case(100):{maxRoll=7;break;}
		case(101):{maxRoll=7;break;}
		case(102):{minRoll=10;maxRoll=25;break;}
		case(103):{minRoll=10;maxRoll=25;break;}
		case(104):{minRoll=5;maxRoll=25;break;}
		case(106):{minRoll=1;maxRoll=4;break;}
		case(105):break;
		default:break;
	} 
	
	uint roll=Random(minRoll,maxRoll); 
	
	switch(number)
	{
		case 1:{it.Val0=bonusType;it.Val5=roll;break;}
		case 2:{it.Val1=bonusType;it.Val6=roll;break;}
		case 3:{it.Val2=bonusType;it.Val7=roll;break;}
		case 4:{it.Val3=bonusType;it.Val8=roll;break;}
		case 5:{it.Val4=bonusType;it.Val9=roll;break;}
		default:break;
	}
	
	it.Update();
	return;
} 

bool IsBonusExcluded(bool isCrafting,int bonusType)
{
	if(!isCrafting)
	return false;
	
	if(bonusType==(105))
	return true;
	
	return false;
} 

bool HasBonusAlready(Item@it,int bonusType)
{
	if(it.Val0==bonusType)return true;
	if(it.Val1==bonusType)return true;
	if(it.Val2==bonusType)return true;
	if(it.Val3==bonusType)return true;
	if(it.Val4==bonusType)return true;
	return false;
}  

int checkBonus(Item@it,int bonusType)
{
	if(it.Val0==bonusType)return it.Val5;
	if(it.Val1==bonusType)return it.Val6;
	if(it.Val2==bonusType)return it.Val7;
	if(it.Val3==bonusType)return it.Val8;
	if(it.Val4==bonusType)return it.Val9;
	return 0;
}  

import void InjectValue(uint x,uint y,uint amount,uint from)from"worldmap";   

bool _OnBarter(Critter&cr,Critter&player,bool attach,uint barterCount)
{
	if(!attach)
	return false;                                                            
	
	{;};
	{;};
	
	{;};
	player.RunClientScript("_BarterInit",GetItemBuyModifier(player,cr),GetItemSellModifier(player,cr),0,"",null);
	player.RunClientScript("_BarterTraderLevels",0,0,0,"",GetTraderLevels(cr));
	return true;
}                               

uint e_Update(array<uint>@values)
{
	
	Critter@npc=GetCritter(values[0]);
	if(!(@npc!=null))
	return 0;
	
	file f;
	f.open("logs/traders.log","a");
	f.writeString(GetCurrentDateTimeString()+"> Updating trader: "+GetScriptName(npc.GetScriptId())+"\n");
	
	array<Item@>npcItems;
	uint npcItemsNumber=npc.GetItems((0),npcItems);
	
	array<uint>npcItemsPids;
	array<uint>npcItemsPidsAll;
	array<uint>npcItemsCount;
	
	npcItemsPids.resize(0);
	npcItemsPidsAll.resize(0);
	npcItemsCount.resize(0);
	for(uint i=0;i<npcItemsNumber;++i)
	{
		npcItemsPidsAll.insertLast(npcItems[i].GetProtoId());
	}
	npcItemsPidsAll.sortAsc();
	
	uint lastPid=0;
	for(uint i=0,j=npcItemsPidsAll.length(),k=0;i<j;++i)
	{
		if(lastPid==0)
		{
			lastPid=npcItemsPidsAll[i];
			npcItemsCount.insertLast(1);
			npcItemsPids.insertLast(lastPid);
		}
		else
		{
			if(lastPid==npcItemsPidsAll[i])
			{
				++npcItemsCount[k];
			}
			else
			{
				++k;
				lastPid=npcItemsPidsAll[i];
				npcItemsCount.insertLast(1);
				npcItemsPids.insertLast(lastPid);
			}
		}
	}
	
	uint remainingCount=1;
	if(npcItemsPids.length()==npcItemsCount.length())
	{
		for(uint i=0;i<npcItemsPids.length();++i)
		{
			remainingCount=(npcItemsCount[i]*2)/10;
			remainingCount=(((remainingCount)>(npcItemsCount[i]))?(npcItemsCount[i]):(((remainingCount)<(1))?(1):(remainingCount)));
			
			if((npcItemsCount[i]>remainingCount)&&!(IsStackItemFromEvent(npcItemsPids[i])))
			{
				npc.DeleteItem(npcItemsPids[i],(npcItemsCount[i]-remainingCount));
			}
		}
	}
	
	array<Item@>items;
	uint totalValue=0;
	
	uint num=npc.GetItems((0),items);      
	
	array<int>tvalues;
	tvalues.resize((9)*3);
	for(uint i=0,j=tvalues.length();i<j;i++)
	tvalues[i]=TraderCapacity(npc,i/3,i%3+1);
	
	array<uint>deleted;
	array<uint>deleted_counts;
	for(uint i=0;i<num;i++)
	{
		if(items[i].GetProtoId()==(41))
		continue; 
		
		int time=GetTraderLevel(npc,TradingItemType(items[i]))*((1)*__TimeMultiplier*86400);  
		
		if(Random(0,time/(((60)*__TimeMultiplier*60)))==0)
		{
			deleted.insertLast(items[i].GetProtoId());
			deleted_counts.insertLast((((1)>(items[i].GetCount()))?(1):(items[i].GetCount())));
			if(!((((items[i].Flags)&((0x00000200)))!=0)))
			DeleteItem(items[i]);
		}
		else
		{
			int val=BaseItemValue(items[i]);
			tvalues[TradingItemType(items[i])*3+ItemLevel(items[i])-1]-=val;
		}
	}
	for(uint i=0,j=tvalues.length();i<j;i++)
	if(tvalues[i]<0)
	tvalues[i]=0;
	
	for(uint i=0,j=deleted.length();i<j;i++)
	{
		if(i>0)
		f.writeString(",");
		f.writeString(""+deleted[i]+":"+deleted_counts[i]);
	}
	f.writeString("\n");
	for(uint i=0,j=tvalues.length();i<j;i++)
	{
		if(i>0)
		f.writeString(",");
		f.writeString(""+tvalues[i]);
	}
	f.writeString("\n");
	
	array<Item@>added;
	AddItems(npc,tvalues,added);
	for(uint i=0,j=added.length();i<j;i++)
	{
		if(i>0)
		f.writeString(",");
		f.writeString(""+added[i].GetProtoId()+":"+(((1)>(added[i].GetCount()))?(1):(added[i].GetCount())));
	}
	f.writeString("\n");
	f.close();         
	
	return(((Random(30,90))*__TimeMultiplier*60));
}                                                                       

import void SetTraderLevels(Critter@npc,array<uint>&levels)from"economy";

void _DenFlick(Critter&npc,bool firstTime)
{
	
	uint[]levels=
	{
		1,1,0,1,1,0,0,0,0
	};
	SetTraderLevels(npc,levels);
	npc.SkillBase[(215)]=65;
	DefaultTraderInit(npc,firstTime);
}

void _DenFrank(Critter&npc,bool firstTime)
{
	uint[]levels=
	{
		0,0,0,0,0,1,1,0,0
	};
	SetTraderLevels(npc,levels);
	npc.SkillBase[(215)]=50;
	DefaultTraderInit(npc,firstTime);
}

void _DenMom(Critter&npc,bool firstTime)
{
	uint[]levels={0,0,0,0,0,1,1,0,0};
	SetTraderLevels(npc,levels);
	npc.SkillBase[(215)]=60;
	DefaultTraderInit(npc,firstTime);
}

void _DenRebecca(Critter&npc,bool firstTime)
{
	
	uint[]levels=
	{
		1,0,0,0,1,0,1,0,0
	};
	SetTraderLevels(npc,levels);
	npc.SkillBase[(215)]=50;
	DefaultTraderInit(npc,firstTime);
}

void _DenTubby(Critter&npc,bool firstTime)
{
	
	uint[]levels=
	{
		2,2,1,0,0,0,0,0,0
	};
	SetTraderLevels(npc,levels);
	npc.SkillBase[(215)]=80;
	DefaultTraderInit(npc,firstTime);
}

void _KlamathBuckner(Critter&npc,bool firstTime)
{
	
	uint[]levels=
	{
		1,0,0,0,0,0,2,0,0
	};
	SetTraderLevels(npc,levels);
	npc.SkillBase[(215)]=40;
	DefaultTraderInit(npc,firstTime);
}

void _ModocGrishem(Critter&npc,bool firstTime)
{
	
	uint[]levels=
	{
		1,0,0,0,1,0,1,0,0
	};
	SetTraderLevels(npc,levels);
	npc.SkillBase[(215)]=60;
	DefaultTraderInit(npc,firstTime);
}

void _ModocJo(Critter&npc,bool firstTime)
{
	
	uint[]levels=
	{
		2,0,1,0,0,0,1,0,0
	};
	SetTraderLevels(npc,levels);
	npc.SkillBase[(215)]=100;
	DefaultTraderInit(npc,firstTime);
	npc.ModeBase[(521)]=1;
}

void _ModocBalthas(Critter&npc,bool firstTime)
{
	
	uint[]levels=
	{
		0,0,0,1,0,0,0,0,0
	};
	SetTraderLevels(npc,levels);
	npc.SkillBase[(215)]=70;
	DefaultTraderInit(npc,firstTime);
}

void _ModocMook(Critter&npc,bool firstTime)
{
	
	uint[]levels=
	{
		0,1,0,0,0,0,1,0,0
	};
	SetTraderLevels(npc,levels);
	npc.SkillBase[(215)]=75;
	DefaultTraderInit(npc,firstTime);
}

void _VCAmenities(Critter&npc,bool firstTime)
{
	uint[]levels=
	{
		0,0,0,0,2,2,0,0,0
	};
	SetTraderLevels(npc,levels);
	npc.SkillBase[(215)]=100;
	DefaultTraderInit(npc,firstTime);
}

void _VCSubAmenitiesA(Critter&npc,bool firstTime)
{
	uint[]levels=
	{
		3,0,0,0,0,0,0,0,0
	};
	SetTraderLevels(npc,levels);
	npc.SkillBase[(215)]=120;
	DefaultTraderInit(npc,firstTime);
}

void _VCSubAmenitiesB(Critter&npc,bool firstTime)
{
	
	uint[]levels=
	{
		0,0,0,2,0,0,0,0,0
	};
	SetTraderLevels(npc,levels);
	npc.SkillBase[(215)]=140;
	DefaultTraderInit(npc,firstTime);
}

void _VCHappyHarry(Critter&npc,bool firstTime)
{
	
	uint[]levels=
	{
		1,1,1,0,0,0,2,0,0
	};
	SetTraderLevels(npc,levels);
	npc.SkillBase[(215)]=90;
	DefaultTraderInit(npc,firstTime);
}

void _VCMacRae(Critter&npc,bool firstTime)
{
	
	uint[]levels=
	{
		2,0,0,0,1,0,1,0,0
	};
	SetTraderLevels(npc,levels);
	npc.SkillBase[(215)]=70;
	DefaultTraderInit(npc,firstTime);
}

void _VCDoctorAndrew(Critter&npc,bool firstTime)
{
	
	uint[]levels=
	{
		0,0,0,0,0,2,0,0,0
	};
	SetTraderLevels(npc,levels);
	npc.SkillBase[(215)]=70;
	DefaultTraderInit(npc,firstTime);
}

void _GeckoSkeeter(Critter&npc,bool firstTime)
{
	
	uint[]levels=
	{
		1,0,2,0,1,0,0,0,0
	};
	SetTraderLevels(npc,levels);
	npc.SkillBase[(215)]=70;
	DefaultTraderInit(npc,firstTime);
}

void _GeckoPercy(Critter&npc,bool firstTime)
{
	
	uint[]levels=
	{
		0,0,0,0,1,0,2,0,0
	};
	SetTraderLevels(npc,levels);
	npc.SkillBase[(215)]=50;
	DefaultTraderInit(npc,firstTime);
}

void _GeckoWooz(Critter&npc,bool firstTime)
{
	
	uint[]levels=
	{
		0,0,0,0,0,1,1,0,0
	};
	SetTraderLevels(npc,levels);
	npc.SkillBase[(215)]=80;
	DefaultTraderInit(npc,firstTime);
}

void _ReddingAscorti(Critter&npc,bool firstTime)
{
	
	uint[]levels=
	{
		2,0,1,0,0,0,2,0,0
	};
	SetTraderLevels(npc,levels);
	npc.SkillBase[(215)]=105;
	DefaultTraderInit(npc,firstTime);
}

void _ReddingDocJohnson(Critter&npc,bool firstTime)
{
	
	uint[]levels=
	{
		0,0,0,0,2,2,0,0,0
	};
	SetTraderLevels(npc,levels);
	npc.SkillBase[(215)]=70;
	DefaultTraderInit(npc,firstTime);
}

void _BrokenDocHolliday(Critter&npc,bool firstTime)
{
	
	uint[]levels=
	{
		0,0,0,0,2,2,0,0,0
	};
	SetTraderLevels(npc,levels);
	npc.SkillBase[(215)]=70;
	DefaultTraderInit(npc,firstTime);
}

void _BrokenLiz(Critter&npc,bool firstTime)
{
	
	uint[]levels=
	{
		2,1,0,2,0,0,1,0,0
	};
	SetTraderLevels(npc,levels);
	npc.SkillBase[(215)]=70;
	DefaultTraderInit(npc,firstTime);
}

void _BrokenPhil(Critter&npc,bool firstTime)
{
	
	uint[]levels=
	{
		0,0,0,0,1,1,1,0,0
	};
	SetTraderLevels(npc,levels);
	npc.SkillBase[(215)]=50;
	DefaultTraderInit(npc,firstTime);
}

void _BrokenBill(Critter&npc,bool firstTime)
{
	
	uint[]levels=
	{
		2,1,2,0,0,0,0,0,0
	};
	SetTraderLevels(npc,levels);
	npc.SkillBase[(215)]=110;
	DefaultTraderInit(npc,firstTime);
}

void _BrokenJacob(Critter&npc,bool firstTime)
{
	
	uint[]levels=
	{
		0,0,0,0,1,1,1,0,0
	};
	SetTraderLevels(npc,levels);
	npc.SkillBase[(215)]=80;
	DefaultTraderInit(npc,firstTime);
}

void _RenoJules(Critter&npc,bool firstTime)
{
	
	uint[]levels=
	{
		0,0,0,0,1,2,0,0,0
	};
	SetTraderLevels(npc,levels);
	npc.SkillBase[(215)]=65;
	DefaultTraderInit(npc,firstTime);
}

void _RenoEldridge(Critter&npc,bool firstTime)
{
	
	uint[]levels=
	{
		3,2,0,0,0,0,0,0,0
	};
	SetTraderLevels(npc,levels);
	npc.SkillBase[(215)]=130;
	DefaultTraderInit(npc,firstTime);
}

void _RenoRenesco(Critter&npc,bool firstTime)
{
	
	uint[]levels=
	{
		0,0,0,0,2,2,2,0,0
	};
	SetTraderLevels(npc,levels);
	npc.SkillBase[(215)]=110;
	DefaultTraderInit(npc,firstTime);
}

void _RenoBartender(Critter&npc,bool firstTime)
{
	
	uint[]levels=
	{
		0,0,0,0,1,1,0,0,0
	};
	SetTraderLevels(npc,levels);
	npc.SkillBase[(215)]=50;
	DefaultTraderInit(npc,firstTime);
}

void _NCRBuster(Critter&npc,bool firstTime)
{
	
	uint[]levels=
	{
		2,2,1,0,0,0,0,0,0
	};
	SetTraderLevels(npc,levels);
	npc.SkillBase[(215)]=125;
	DefaultTraderInit(npc,firstTime);
}

void _NCRDusty(Critter&npc,bool firstTime)
{
	
	uint[]levels=
	{
		1,0,0,0,1,1,1,0,0
	};
	SetTraderLevels(npc,levels);
	npc.SkillBase[(215)]=65;
	DefaultTraderInit(npc,firstTime);
}

void _NCRMiria(Critter&npc,bool firstTime)
{
	
	uint[]levels=
	{
		1,0,0,0,1,1,1,0,0
	};
	SetTraderLevels(npc,levels);
	npc.SkillBase[(215)]=65;
	DefaultTraderInit(npc,firstTime);
}

void _NCRShaNine(Critter&npc,bool firstTime)
{
	
	uint[]levels=
	{
		1,0,0,2,0,0,2,0,0
	};
	SetTraderLevels(npc,levels);
	npc.SkillBase[(215)]=90;
	DefaultTraderInit(npc,firstTime);
} 

void _SFChiang(Critter&npc,bool firstTime)
{
	
	uint[]levels=
	{
		3,0,2,0,0,0,0,0,0
	};
	SetTraderLevels(npc,levels);
	npc.SkillBase[(215)]=160;
	DefaultTraderInit(npc,firstTime);
}

void _SFDrFung(Critter&npc,bool firstTime)
{
	
	uint[]levels=
	{
		0,0,0,0,2,2,0,0,0
	};
	SetTraderLevels(npc,levels);
	npc.SkillBase[(215)]=100;
	DefaultTraderInit(npc,firstTime);
}

void _SFJenny(Critter&npc,bool firstTime)
{
	
	uint[]levels=
	{
		1,0,0,0,1,1,2,0,0
	};
	SetTraderLevels(npc,levels);
	npc.SkillBase[(215)]=125;
	DefaultTraderInit(npc,firstTime);
}

void _SFKarl(Critter&npc,bool firstTime)
{
	
	uint[]levels=
	{
		0,2,0,2,0,0,0,0,0
	};
	SetTraderLevels(npc,levels);
	npc.SkillBase[(215)]=140;
	DefaultTraderInit(npc,firstTime);
}

void _SFSlim(Critter&npc,bool firstTime)
{
	
	uint[]levels=
	{
		1,0,0,0,2,2,1,0,0
	};
	SetTraderLevels(npc,levels);
	npc.SkillBase[(215)]=70;
	DefaultTraderInit(npc,firstTime);
}

void _Killian(Critter&npc,bool firstTime)
{
	
	uint[]levels=
	{
		1,1,0,0,1,1,1,0,0
	};
	SetTraderLevels(npc,levels);
	npc.SkillBase[(215)]=110;
	DefaultTraderInit(npc,firstTime);
}

void _Mitch(Critter&npc,bool firstTime)
{
	
	uint[]levels=
	{
		1,0,0,0,2,0,2,0,0
	};
	SetTraderLevels(npc,levels);
	npc.SkillBase[(215)]=100;
	DefaultTraderInit(npc,firstTime);
}

void _Beth(Critter&npc,bool firstTime)
{
	
	uint[]levels=
	{
		0,0,1,0,1,1,1,0,0
	};
	SetTraderLevels(npc,levels);
	npc.SkillBase[(215)]=120;
	DefaultTraderInit(npc,firstTime);
}

void _Stapleton(Critter&npc,bool firstTime)
{
	
	uint[]levels=
	{
		0,0,0,0,0,0,0,1,0
	};
	SetTraderLevels(npc,levels);
	npc.SkillBase[(215)]=150;
	DefaultTraderInit(npc,firstTime);
}

void _Jacob(Critter&npc,bool firstTime)
{
	
	uint[]levels=
	{
		0,2,1,2,0,0,0,0,0
	};
	SetTraderLevels(npc,levels);
	npc.SkillBase[(215)]=145;
	DefaultTraderInit(npc,firstTime);
}

void _CathShop(Critter&npc,bool firstTime)
{
	
	uint[]levels=
	{
		0,0,2,0,0,2,0,0,0
	};
	SetTraderLevels(npc,levels);
	npc.SkillBase[(215)]=140;
	DefaultTraderInit(npc,firstTime);
}

void _Gunsmith(Critter&npc,bool firstTime)
{
	
	uint[]levels=
	{
		2,0,0,1,0,0,0,0,0
	};
	SetTraderLevels(npc,levels);
	npc.SkillBase[(215)]=130;
	DefaultTraderInit(npc,firstTime);
}

void _Gunrunner(Critter&npc,bool firstTime)
{
	
	uint[]levels=
	{
		3,2,2,2,0,0,0,0,0
	};
	SetTraderLevels(npc,levels);
	npc.SkillBase[(215)]=170;
	DefaultTraderInit(npc,firstTime);
}

void _Taylor(Critter&npc,bool firstTime)
{
	
	uint[]levels=
	{
		1,0,0,0,1,0,1,0,0
	};
	SetTraderLevels(npc,levels);
	npc.SkillBase[(215)]=60;
	DefaultTraderInit(npc,firstTime);
}

void _KhansArt(Critter&npc,bool firstTime)
{
	
	uint[]levels=
	{
		3,0,0,1,0,1,1,0,0
	};
	SetTraderLevels(npc,levels);
	npc.SkillBase[(215)]=110;
	DefaultTraderInit(npc,firstTime);
}

void _KhansAugustus(Critter&npc,bool firstTime)
{
	
	uint[]levels=
	{
		0,0,0,0,2,2,0,0,0
	};
	SetTraderLevels(npc,levels);
	npc.SkillBase[(215)]=60;
	DefaultTraderInit(npc,firstTime);
}

void _GasStationGordon(Critter&npc,bool firstTime)
{
	
	uint[]levels={0,0,0,0,1,1,1,0,0};
	SetTraderLevels(npc,levels);
	npc.SkillBase[(215)]=80;
	DefaultTraderInit(npc,firstTime);
} 

void _Tibbett(Critter&npc,bool firstTime)
{
	
	uint[]levels=
	{
		1,1,1,2,0,0,0,0,0
	};
	SetTraderLevels(npc,levels);
	npc.SkillBase[(215)]=100;
	DefaultTraderInit(npc,firstTime);
}

void _VegasTony(Critter&npc,bool firstTime)
{
	
	uint[]levels=
	{
		0,0,0,0,1,0,0,0,0
	};
	SetTraderLevels(npc,levels);
	npc.SkillBase[(215)]=100;
	DefaultTraderInit(npc,firstTime);
}

void _VegasWoody(Critter&npc,bool firstTime)
{
	
	uint[]levels=
	{
		0,0,0,0,1,0,0,0,0
	};
	SetTraderLevels(npc,levels);
	npc.SkillBase[(215)]=100;
	DefaultTraderInit(npc,firstTime);
}

void _Kwok(Critter&npc,bool firstTime)
{
	
	uint[]levels=
	{
		2,1,0,0,0,1,1,0,0
	};
	SetTraderLevels(npc,levels);
	npc.SkillBase[(215)]=100;
	DefaultTraderInit(npc,firstTime);
}

void _Quok(Critter&npc,bool firstTime)
{
	
	uint[]levels=
	{
		0,2,2,0,0,0,0,0,0
	};
	SetTraderLevels(npc,levels);
	npc.SkillBase[(215)]=100;
	DefaultTraderInit(npc,firstTime);
}

void _JovialJoe(Critter&npc,bool firstTime)
{
	
	uint[]levels=
	{
		0,0,0,0,1,1,0,0,0
	};
	SetTraderLevels(npc,levels);
	npc.SkillBase[(215)]=100;
	DefaultTraderInit(npc,firstTime);
}

void _Pharmacist(Critter&npc,bool firstTime)
{
	
	uint[]levels=
	{
		0,0,0,0,1,1,0,0,0
	};
	SetTraderLevels(npc,levels);
	npc.SkillBase[(215)]=100;
	DefaultTraderInit(npc,firstTime);
}

void _LiquidJoe(Critter&npc,bool firstTime)
{
	
	uint[]levels=
	{
		0,0,1,1,1,0,0,0,0
	};
	SetTraderLevels(npc,levels);
	npc.SkillBase[(215)]=100;
	DefaultTraderInit(npc,firstTime);
}

void _CptFernandez(Critter&npc,bool firstTime)
{
	
	uint[]levels=
	{
		1,1,0,0,1,0,0,0,0
	};
	SetTraderLevels(npc,levels);
	npc.SkillBase[(215)]=100;
	DefaultTraderInit(npc,firstTime);
}

void DefaultTraderInit(Critter&npc,bool firstTime)
{
	npc.ModeBase[(511)]=1;
	npc.ModeBase[(532)]=1;
	npc.ModeBase[(523)]=1;
	npc.ModeBase[(512)]=0;
	(npc.ModeBase[(534)]=npc.Mode[(534)]|((0x00000010)));
	
	npc.SetEvent((38),"_OnBarter");
	
	npc.SetBagRefreshTime(uint(-1));
	int bag_bug=npc.GetBagRefreshTime();
	
	array<uint>eventdata={npc.Id,0,0}; 
	
	if(firstTime)
	{
		AddStarterItems(npc);
	}
	
	CreateTimeEvent((__FullSecond)+(((Random(30,90))*__TimeMultiplier*60)),"e_Update",npc.Id,false);
	
	Map@map=npc.GetMap();
	
	if(firstTime)
	if(!map.GetLocation().IsEncounter())
	CreateTimeEvent(((__FullSecond)+(((Random(5,14400))*__TimeMultiplier*60))),"e_SpecialItemEvent",eventdata,true);
	
}  

void AddStarterItems(Critter@npc){AddItems(npc,null,null);} 

void AddItems(Critter@npc,array<int>@tvalues,array<Item@>@items)
{
	
	array<int>levels=GetTraderLevels(npc);
	int caps=0;
	for(int type=0;type<(9);type++)
	{
		if(levels[type]==0&&!(@tvalues!=null))
		continue;
		
		for(int level=1;level<=3;level++)
		{
			int cap=TraderCapacity(npc,type,level);
			if((@tvalues!=null))
			{
				cap=tvalues[type*3+level-1];
				if(levels[type]==0)
				{
					caps+=cap;
					continue;
				}
			}
			if(cap==0)
			continue;
			
			int tval=0;
			array<array<uint>>list=lists[type*3+level-1];
			int len=list.length();
			if(len==0)
			continue;
			array<int>vals(len);
			for(int i=0;i<len;i++)
			vals[i]=(((1)>(BaseItemValue(list[i][0],true)*list[i][1]))?(1):(BaseItemValue(list[i][0],true)*list[i][1]));
			
			for(int i=0,j=list.length();i<j;i++)
			{
				int maxi=i;
				for(int k=i;k<j;k++)
				if(vals[maxi]>vals[k])
				maxi=k;
				if(maxi!=i)
				{
					array<uint>temp=list[i];
					list[i]=list[maxi];
					list[maxi]=temp;
					int tmp2=vals[i];
					vals[i]=vals[maxi];
					vals[maxi]=tmp2;
				}
			}   
			
			int last=-1;
			while(last<(len-1)&&(vals[last+1]<cap))
			last++;
			int rnd=0;
			while(last>=0)
			{
				rnd=Random(0,last);
				Item@it=npc.AddItem(list[rnd][0],list[rnd][1]);
				if((@items!=null))
				items.insertLast(it);
				cap-=vals[rnd];
				tval+=vals[rnd];
				while(last>=0&&vals[last]>cap)
				last--;
			} 
			
		}
	}
	if(caps>0)
	{
		Item@it=npc.AddItem((41),caps);
		items.insertLast(it);
	}          
	
	caps=npc.CountItem((41));
	if(caps<7000&&!IsGuarded(npc.GetMap()))
	{
		Item@it=npc.AddItem((41),Random(1000,2000));
		if((@items!=null)&&(@it!=null))items.insertLast(it);
	}
	else if(caps<2000&&IsGuarded(npc.GetMap()))
	{
		Item@it=npc.AddItem((41),Random(500,1000));
		if((@items!=null)&&(@it!=null))items.insertLast(it);
	}   
	
}

uint e_SpecialItemEvent(array<uint>@values)
{
	if(values.length()==1)
	{
		values.resize(3);
		values[1]=0;
		values[2]=0;
	}
	
	bool GMCreated=(values[1]==0?false:true);
	uint location=0,type=(27),baseprice,item,podniesienieceny,timeleft=((Random(10,30))*__TimeMultiplier*60);
	uint8 itemkind=Random(1,20),ilosc=1,stackable=0;
	string itemname="something special",locationname,npctrader="Someone",bonustype=" ";
	Critter@trader=GetCritter(values[0]);
	if(!(@trader!=null))
	return 0;
	
	if(!GMCreated)
	{
		switch(itemkind)
		{
			case 1:
			switch(Random(1,8))
			{
				case 1:item=(3);itemname="Power Armor";break;
				case 2:item=(232);itemname="Hardened Power Armor";break;
				case 3:item=(348);itemname="Advanced Power Armor";break;
				case 4:item=(349);itemname="Advanced Power Armor MK2";break;
				case 5:item=(735);itemname="Advanced Power Helmet";break;
				case 6:item=(736);itemname="Advanced Power Helmet MK2";break;
				case 7:item=(737);itemname="Hardened Power Helmet";break;
				case 8:item=(721);itemname="Power Helmet";break;
			}
			break;
			case 2:
			case 3:
			switch(Random(1,10))
			{
				case 1:item=(239);itemname="Brotherhood Combat Armor";break;
				case 2:item=(9654);itemname="NCR Ranger Combat Armor";break;
				case 3:item=(752);itemname="Enclave Combat Armor";break;
				case 4:item=(727);itemname="Brotherhood Combat Helmet";break;
				case 5:item=(738);itemname="Enclave Combat Helmet";break;
				case 6:item=(739);itemname="Enclave Combat Helmet MK2";break;
				case 7:item=(740);itemname="Desert Combat Helmet";break;
				case 8:item=(741);itemname="NCR Ranger Combat Helmet";break;
				case 9:item=(761);itemname="Police Uniform";break;
				case 10:item=(778);itemname="Desert Combat Armor";break;
			}
			break;
			case 4:
			switch(Random(1,15))
			{
				case 1:item=(394);itemname="PPK12 Gauss Pistol";break;
				case 2:item=(143);itemname="Sniper Rifle";break;
				case 3:item=(353);itemname="XL70E3";break;
				case 4:item=(392);itemname="M72 Gauss Rifle";break;
				case 5:item=(352);itemname="H&K G11";break;
				case 6:item=(391);itemname="H&K G11E";break;
				case 7:item=(350);itemname="Bozar";break;
				case 8:item=(120);itemname="Alien Blaster";break;
				case 9:item=(233);itemname="Turbo Plasma Rifle";break;
				case 10:item=(396);itemname="YK32 Pulse Pistol";break;
				case 11:item=(397);itemname="YK42B Pulse Rifle";break;
				case 12:item=(28);itemname="Gatling Laser";break;
				case 13:item=(22120);itemname="M202A1 FLASH";break;
				case 14:item=(390);itemname="Solar Scorcher";break;
				case 15:item=(25445);itemname="Saiga-12 shotgun";break;
			}
			break;
			case 5:
			case 6:
			switch(Random(1,13))
			{
				case 1:item=(241);itemname=".223 Pistol";break;
				case 2:item=(354);itemname="Pancor Jackhammer";break;
				case 3:item=(268);itemname="H&K CAWS";break;
				case 4:item=(296);itemname="HK P90c";break;
				case 5:item=(389);itemname="Avenger Minigun";break;
				case 6:item=(355);itemname="Light Support Weapon";break;
				case 7:item=(118);itemname="Laser Rifle";break;
				case 8:item=(401);itemname="Laser Rifle (Ext. Cap.)";break;
				case 9:item=(15);itemname="Plasma Rifle";break;
				case 10:item=(359);itemname="4.7mm Caseless";break;
				case 11:item=(358);itemname="2mm EC ammunition";break;
				case 12:item=(850);itemname="12 ga. Gecko's Breath Shotgun Shells";break;
				case 13:item=(525);itemname="Hypo";break;
			}
			break;
			case 7:
			switch(Random(1,40))
			{
				case 1:item=(9773);itemname="plans for XL70E3 Rifle";break;
				case 2:item=(9775);itemname="plans for Bozar";break;
				case 3:item=(9776);itemname="plans for M202A1 FLASH Rocket Launcher";break;
				case 4:item=(9777);itemname="plans for Vindicator Minigun";break;
				case 5:item=(9778);itemname="plans for Turbo Plasma Rifle";break;
				case 6:item=(9779);itemname="plans for YK42B Pulse Rifle";break;
				case 7:item=(9825);itemname="plans for H&K G11 submachine gun";break;
				case 8:item=(9826);itemname="plans for H&K G11E submachine gun";break;
				case 9:item=(9827);itemname="plans for YK32 Pulse Pistol";break;
				case 10:item=(9828);itemname="plans for FN FAL Night Scope";break;
				case 11:item=(9829);itemname="plans for PK12 Gauss Pistol";break;
				case 12:item=(9830);itemname="plans for M72 Gauss Rifle";break;
				case 13:item=(9831);itemname="plans for Solar Scorcher";break;
				case 14:item=(9836);itemname="plans for Metal Armor Mark 3";break;
				case 15:item=(9813);itemname="plans for a Combat Helmet Mark II";break;
				case 16:item=(9814);itemname="plans for a Brotherhood Combat Helmet";break;
				case 17:item=(9815);itemname="plans for an Enclave Combat Helmet";break;
				case 18:item=(9816);itemname="plans for an Enclave Combat Helmet Mark II";break;
				case 19:item=(9817);itemname="plans for a Desert Combat Helmet";break;
				case 20:item=(9818);itemname="plans for a NCR Combat Helmet";break;
				case 21:item=(9819);itemname="plans for a Power Helmet";break;
				case 22:item=(9820);itemname="plans for a Hardened Power Helmet";break;
				case 23:item=(9821);itemname="plans for a Advanced Power Helmet";break;
				case 24:item=(9822);itemname="plans for a Advanced Power Helmet Mark II";break;
				case 25:item=(9783);itemname="plans for a Combat Armor Mark II";break;
				case 26:item=(9784);itemname="plans for a Brotherhood Combat Armor";break;
				case 27:item=(9785);itemname="plans for an Enclave Combat Armor";break;
				case 28:item=(9786);itemname="plans for a Desert Combat Armor";break;
				case 29:item=(9787);itemname="plans for a NCR Ranger Combat Armor";break;
				case 30:item=(9788);itemname="plans for a Power Armor";break;
				case 31:item=(9789);itemname="plans for a Hardened Power Armor";break;
				case 32:item=(9823);itemname="plans for a Advanced Power Armor";break;
				case 33:item=(9824);itemname="plans for a Advanced Power Armor Mark II";break;
				case 34:item=(9798);itemname="Recipe for the Hypo";break;
				case 35:item=(9799);itemname="Recipe for the Jet Antidote";break;
				case 36:item=(9832);itemname="plans for Gecko's Breath Shotgun Shells";break;
				case 37:item=(9834);itemname="plans for 4.7mm caseless ammunition";break;
				case 38:item=(9835);itemname="plans for 2mm EC ammunition";break;
				case 39:item=(9838);itemname="plans for Gatling Laser";break;
				case 40:item=(9839);itemname="plans for Saiga-12 semi-automatic shotgun";break;
			}
			break;
			case 8:
			switch(Random(1,10))
			{
				case 1:item=(22051);itemname="Dermal Module";break;
				case 2:item=(22052);itemname="Phoenix Module";break;
				case 3:item=(22053);itemname="Nemean Module";break;
				case 4:item=(22054);itemname="Hypertrophy Accelerator";break;
				case 5:item=(22055);itemname="Optics Enhancer";break;
				case 6:item=(22056);itemname="Nociception Regulator";break;
				case 7:item=(22057);itemname="Empathy Synthesizer";break;
				case 8:item=(22058);itemname="Logic Co-processor";break;
				case 9:item=(22059);itemname="Reflex Booster";break;
				case 10:item=(22060);itemname="Probability Calculator";break;
			}
			break;
			case 9:
			switch(Random(1,37))
			{
				case 1:item=(9750);itemname="plans for Sig-Sauer 14mm Auto Pistol";break;
				case 2:item=(9751);itemname="plans for HN Needler Pistol";break;
				case 3:item=(9752);itemname="plans for .223 Pistol";break;
				case 4:item=(9753);itemname="plans for AK-112 assault rifle";break;
				case 5:item=(9754);itemname="plans for FN FAL battle rifle";break;
				case 6:item=(9755);itemname="plans for DKS-501 Sniper Rifle";break;
				case 7:item=(9756);itemname="plans for H&K P90c";break;
				case 8:item=(9757);itemname="plans for H&K CAWS automatic shotgun";break;
				case 9:item=(9758);itemname="plans for Pancor Jackhammer shotgun";break;
				case 10:item=(9759);itemname="plans for Glock 86 Defender Plasma Pistol";break;
				case 11:item=(9760);itemname="plans for Wattz 2000 Laser Rifle";break;
				case 12:item=(9761);itemname="plans for Winchester P94 Plasma Rifle";break;
				case 13:item=(9762);itemname="plans for Big Frigger Mega Power Fist";break;
				case 14:item=(9763);itemname="plans for Wattz Electronics Super Cattle Prod";break;
				case 15:item=(9764);itemname="plans for Ripper vibroblade";break;
				case 16:item=(9765);itemname="plans for Rockwell BigBazooka";break;
				case 17:item=(9766);itemname="plans for squad-level Light Support Weapon";break;
				case 18:item=(9767);itemname="plans for CZ53 Personal Minigun";break;
				case 19:item=(9768);itemname="plans for Plasma Grenades";break;
				case 20:item=(9769);itemname="plans for Dynamite";break;
				case 21:item=(9770);itemname="plans for Plastic Explosives";break;
				case 22:item=(9771);itemname="plans for Super Sledge";break;
				case 23:item=(9772);itemname="plans for Incinerator";break;
				case 24:item=(9780);itemname="plans for Metal Armor Mark II";break;
				case 25:item=(9781);itemname="plans for Tesla Armor";break;
				case 26:item=(9782);itemname="plans for Combat Armor";break;
				case 27:item=(9810);itemname="plans for Metal Mask MkII";break;
				case 28:item=(9811);itemname="plans for Tesla Helmet";break;
				case 29:item=(9812);itemname="plans for Combat Helmet";break;
				case 30:item=(9790);itemname="plans for Super Stimpak";break;
				case 31:item=(9791);itemname="plans for Stimpak";break;
				case 32:item=(9792);itemname="plans for Jet";break;
				case 33:item=(9793);itemname="plans for Buffout";break;
				case 34:item=(9794);itemname="plans for Mentats";break;
				case 35:item=(9795);itemname="plans for Psycho";break;
				case 36:item=(9796);itemname="plans for Rad Away";break;
				case 37:item=(9797);itemname="plans for Rad-X";break;
			}
			break;
			default:return((Random(360,2880))*__TimeMultiplier*60);
		}
	}
	else
	{
		item=values[2];
		switch(item)
		{
			case(3):itemname="Power Armor";break;
			case(232):itemname="Hardened Power Armor";break;
			case(348):itemname="Advanced Power Armor";break;
			case(349):itemname="Advanced Power Armor MK2";break;
			case(735):itemname="Advanced Power Helmet";break;
			case(736):itemname="Advanced Power Helmet MK2";break;
			case(737):itemname="Hardened Power Helmet";break;
			case(721):itemname="Power Helmet";break;
			case(239):itemname="Brotherhood Combat Armor";break;
			case(9654):itemname="NCR Ranger Combat Armor";break;
			case(752):itemname="Enclave Combat Armor";break;
			case(727):itemname="Brotherhood Combat Helmet";break;
			case(738):itemname="Enclave Combat Helmet";break;
			case(739):itemname="Enclave Combat Helmet MK2";break;
			case(740):itemname="Desert Combat Helmet";break;
			case(741):itemname="NCR Ranger Combat Helmet";break;
			case(761):itemname="Police Uniform";break;
			case(778):itemname="Desert Combat Armor";break;
			case(394):itemname="PPK12 Gauss Pistol";break;
			case(143):itemname="Sniper Rifle";break;
			case(353):itemname="XL70E3";break;
			case(392):itemname="M72 Gauss Rifle";break;
			case(352):itemname="H&K G11";break;
			case(391):itemname="H&K G11E";break;
			case(350):itemname="Bozar";break;
			case(120):itemname="Alien Blaster";break;
			case(233):itemname="Turbo Plasma Rifle";break;
			case(396):itemname="YK32 Pulse Pistol";break;
			case(397):itemname="YK42B Pulse Rifle";break;
			case(28):itemname="Gatling Laser";break;
			case(22120):itemname="M202A1 FLASH";break;
			case(390):itemname="Solar Scorcher";break;
			case(25445):itemname="Saiga-12 shotgun";break;
			case(241):itemname=".223 Pistol";break;
			case(354):itemname="Pancor Jackhammer";break;
			case(268):itemname="H&K CAWS";break;
			case(296):itemname="HK P90c";break;
			case(389):itemname="Avenger Minigun";break;
			case(355):itemname="Light Support Weapon";break;
			case(118):itemname="Laser Rifle";break;
			case(401):itemname="Laser Rifle (Ext. Cap.)";break;
			case(15):itemname="Plasma Rifle";break;
			case(359):itemname="4.7mm Caseless";break;
			case(358):itemname="2mm EC ammunition";break;
			case(850):itemname="12 ga. Gecko's Breath Shotgun Shells";break;
			case(525):itemname="Hypo";break;
			case(9773):itemname="plans for XL70E3 Rifle";break;
			case(9775):itemname="plans for Bozar";break;
			case(9776):itemname="plans for M202A1 FLASH Rocket Launcher";break;
			case(9777):itemname="plans for Vindicator Minigun";break;
			case(9778):itemname="plans for Turbo Plasma Rifle";break;
			case(9779):itemname="plans for YK42B Pulse Rifle";break;
			case(9825):itemname="plans for H&K G11 submachine gun";break;
			case(9826):itemname="plans for H&K G11E submachine gun";break;
			case(9827):itemname="plans for YK32 Pulse Pistol";break;
			case(9828):itemname="plans for FN FAL Night Scope";break;
			case(9829):itemname="plans for PK12 Gauss Pistol";break;
			case(9830):itemname="plans for M72 Gauss Rifle";break;
			case(9831):itemname="plans for Solar Scorcher";break;
			case(9836):itemname="plans for Metal Armor Mark 3";break;
			case(9813):itemname="plans for a Combat Helmet Mark II";break;
			case(9814):itemname="plans for a Brotherhood Combat Helmet";break;
			case(9815):itemname="plans for an Enclave Combat Helmet";break;
			case(9816):itemname="plans for an Enclave Combat Helmet Mark II";break;
			case(9817):itemname="plans for a Desert Combat Helmet";break;
			case(9818):itemname="plans for a NCR Combat Helmet";break;
			case(9819):itemname="plans for a Power Helmet";break;
			case(9820):itemname="plans for a Hardened Power Helmet";break;
			case(9821):itemname="plans for a Advanced Power Helmet";break;
			case(9822):itemname="plans for a Advanced Power Helmet Mark II";break;
			case(9783):itemname="plans for a Combat Armor Mark II";break;
			case(9784):itemname="plans for a Brotherhood Combat Armor";break;
			case(9785):itemname="plans for an Enclave Combat Armor";break;
			case(9786):itemname="plans for a Desert Combat Armor";break;
			case(9787):itemname="plans for a NCR Ranger Combat Armor";break;
			case(9788):itemname="plans for a Power Armor";break;
			case(9789):itemname="plans for a Hardened Power Armor";break;
			case(9823):itemname="plans for a Advanced Power Armor";break;
			case(9824):itemname="plans for a Advanced Power Armor Mark II";break;
			case(9798):itemname="Recipe for the Hypo";break;
			case(9799):itemname="Recipe for the Jet Antidote";break;
			case(9832):itemname="plans for Gecko's Breath Shotgun Shells";break;
			case(9834):itemname="plans for 4.7mm caseless ammunition";break;
			case(9835):itemname="plans for 2mm EC ammunition";break;
			case(9838):itemname="plans for Gatling Laser";break;
			case(9839):itemname="plans for Saiga-12 semi-automatic shotgun";break;
			case(22051):itemname="Dermal Module";break;
			case(22052):itemname="Phoenix Module";break;
			case(22053):itemname="Nemean Module";break;
			case(22054):itemname="Hypertrophy Accelerator";break;
			case(22055):itemname="Optics Enhancer";break;
			case(22056):itemname="Nociception Regulator";break;
			case(22057):itemname="Empathy Synthesizer";break;
			case(22058):itemname="Logic Co-processor";break;
			case(22059):itemname="Reflex Booster";break;
			case(22060):itemname="Probability Calculator";break;
			case(9750):itemname="plans for Sig-Sauer 14mm Auto Pistol";break;
			case(9751):itemname="plans for HN Needler Pistol";break;
			case(9752):itemname="plans for .223 Pistol";break;
			case(9753):itemname="plans for AK-112 assault rifle";break;
			case(9754):itemname="plans for FN FAL battle rifle";break;
			case(9755):itemname="plans for DKS-501 Sniper Rifle";break;
			case(9756):itemname="plans for H&K P90c";break;
			case(9757):itemname="plans for H&K CAWS automatic shotgun";break;
			case(9758):itemname="plans for Pancor Jackhammer shotgun";break;
			case(9759):itemname="plans for Glock 86 Defender Plasma Pistol";break;
			case(9760):itemname="plans for Wattz 2000 Laser Rifle";break;
			case(9761):itemname="plans for Winchester P94 Plasma Rifle";break;
			case(9762):itemname="plans for Big Frigger Mega Power Fist";break;
			case(9763):itemname="plans for Wattz Electronics Super Cattle Prod";break;
			case(9764):itemname="plans for Ripper vibroblade";break;
			case(9765):itemname="plans for Rockwell BigBazooka";break;
			case(9766):itemname="plans for squad-level Light Support Weapon";break;
			case(9767):itemname="plans for CZ53 Personal Minigun";break;
			case(9768):itemname="plans for Plasma Grenades";break;
			case(9769):itemname="plans for Dynamite";break;
			case(9770):itemname="plans for Plastic Explosives";break;
			case(9771):itemname="plans for Super Sledge";break;
			case(9772):itemname="plans for Incinerator";break;
			case(9780):itemname="plans for Metal Armor Mark II";break;
			case(9781):itemname="plans for Tesla Armor";break;
			case(9782):itemname="plans for Combat Armor";break;
			case(9810):itemname="plans for Metal Mask MkII";break;
			case(9811):itemname="plans for Tesla Helmet";break;
			case(9812):itemname="plans for Combat Helmet";break;
			case(9790):itemname="plans for Super Stimpak";break;
			case(9791):itemname="plans for Stimpak";break;
			case(9792):itemname="plans for Jet";break;
			case(9793):itemname="plans for Buffout";break;
			case(9794):itemname="plans for Mentats";break;
			case(9795):itemname="plans for Psycho";break;
			case(9796):itemname="plans for Rad Away";break;
			case(9797):itemname="plans for Rad-X";break;
			default:itemname="something special";
		}
	}
	
	Map@map=trader.GetMap();
	Location@otherLocation=map.GetLocation();
	location=otherLocation.GetProtoId();
	
	switch(map.GetProtoId())
	{
		case(6):
		locationname="Den";
		location=(1);
		
		switch(trader.Param[(104)])
		{
			case(114):
			npctrader="Flick";
			type=(21);
			break;
			case(107):
			npctrader="Mom";
			type=(22);
			break;
			case(115):
			npctrader="Rebecca";
			type=(23);
			break;
			case(119):
			npctrader="Tubby";
			type=(24);
			break;
			case(120):
			npctrader="Frank";
			type=(25);
			break;
			
			default:if(!GMCreated)npctrader="NOT RECOGNIZED CritterID: "+trader.Id;type=(27);break;
		}
		break;
		
		case(9):
		locationname="Klamath";
		location=(2);
		
		switch(trader.Param[(104)])
		{
			case(209):
			npctrader="Maida Buckner";
			type=(21);
			break;
			default:if(!GMCreated)npctrader="NOT RECOGNIZED CritterID: "+trader.Id;type=(27);break;
		}
		break;
		
		case(18):
		locationname="Modoc";
		location=(3);
		
		switch(trader.Param[(104)])
		{
			case(307):
			npctrader="Grisham";
			type=(21);
			break;
			case(301):
			npctrader="Jo";
			type=(22);
			break;
			case(303):
			npctrader="Balthas";
			type=(23);
			break;
			case(300):
			npctrader="Mook";
			type=(24);
			break;
			default:if(!GMCreated)npctrader="NOT RECOGNIZED CritterID: "+trader.Id;type=(27);break;
		}
		break;
		
		case(16):
		locationname="Vault City";
		location=(4);
		
		switch(trader.Param[(104)])
		{
			case(429):
			npctrader="McRae";
			type=(21);
			break;
			case(425):
			npctrader="Harry";
			type=(22);
			break;
			case(409):
			npctrader="Doctor Andrew";
			type=(23);
			break;
			case(437):
			npctrader="Randal";
			type=(24);
			break;
			case(416):
			npctrader="Darrow";
			type=(25);
			break;
			case(420):
			npctrader="Holden";
			type=(26);
			break;
			default:if(!GMCreated)npctrader="NOT RECOGNIZED CritterID: "+trader.Id;type=(27);break;
		}
		break;
		
		case(31):
		locationname="Gecko";
		location=(5);
		
		switch(trader.Param[(104)])
		{
			case(516):
			npctrader="Wooz";
			type=(21);
			break;
			case(513):
			npctrader="Percy";
			type=(22);
			break;
			case(515):
			npctrader="Skeeter";
			type=(23);
			break;
			default:if(!GMCreated)npctrader="NOT RECOGNIZED CritterID: "+trader.Id;type=(27);break;
		}
		break;
		
		case(62):
		locationname="Redding";
		location=(13);
		
		switch(trader.Param[(104)])
		{
			case(1305):
			npctrader="Ascorti";
			type=(21);
			break;
			case(1300):
			npctrader="Doc Johnson";
			type=(22);
			break;
			default:if(!GMCreated)npctrader="NOT RECOGNIZED CritterID: "+trader.Id;type=(27);break;
		}
		break;
		
		case(115):
		locationname="Broken Hills";
		location=(6);
		
		switch(trader.Param[(104)])
		{
			case(621):
			npctrader="Liz";
			type=(21);
			break;
			case(630):
			npctrader="Bill";
			type=(22);
			break;
			case(631):
			npctrader="Phil";
			type=(23);
			break;
			case(620):
			npctrader="Jacob";
			type=(24);
			break;
			case(609):
			npctrader="Doc Holliday";
			type=(25);
			break;
			
			default:if(!GMCreated)npctrader="NOT RECOGNIZED CritterID: "+trader.Id;type=(27);break;
		}
		break;
		
		case(54):
		case(55):
		case(56):
		case(265):
		case(266):
		locationname="New Reno";
		location=(7);
		
		switch(trader.Param[(104)])
		{
			case(744):
			npctrader="Jules";
			type=(21);
			break;
			case(702):
			npctrader="Some bartender";
			type=(22);
			break;
			case(741):
			npctrader="Eldridge";
			type=(23);
			break;
			case(760):
			npctrader="Renesco";
			type=(24);
			break;
			
			default:if(!GMCreated)npctrader="NOT RECOGNIZED CritterID: "+trader.Id;type=(27);break;
		}
		break;
		
		case(45):
		locationname="NCR";
		location=(10);
		
		switch(trader.Param[(104)])
		{
			case(1048):
			npctrader="Seumour";
			type=(21);
			break;
			case(1002):
			npctrader="Buster";
			type=(22);
			break;
			case(1004):
			npctrader="Mira";
			type=(23);
			break;
			case(1024):
			npctrader="Dusty";
			type=(24);
			break;
			case(1026):
			npctrader="Doc Jubilee";
			type=(25);
			break;
			
			default:if(!GMCreated)npctrader="NOT RECOGNIZED CritterID: "+trader.Id;type=(27);break;
		}
		break;
		
		case(135):
		case(137):
		locationname="San Francisco";
		location=(14);
		
		switch(trader.Param[(104)])
		{
			case(1405):
			npctrader="Fung";
			type=(21);
			break;
			case(1403):
			npctrader="Chou";
			type=(22);
			break;
			case(1416):
			npctrader="Cal";
			type=(23);
			break;
			case(1415):
			npctrader="Jenna";
			type=(24);
			break;
			case(1413):
			npctrader="Slim";
			type=(25);
			break;
			case(1402):
			npctrader="Ma Da Chiang";
			type=(26);
			break;
			
			default:if(!GMCreated)npctrader="NOT RECOGNIZED CritterID: "+trader.Id;type=(27);break;
		}
		break;
		
		case(70):
		locationname="Junktown";
		location=(17);
		
		switch(trader.Param[(104)])
		{
			case(1703):
			npctrader="Jeremiah";
			type=(21);
			break;
			
			default:if(!GMCreated)npctrader="NOT RECOGNIZED CritterID: "+trader.Id;type=(27);break;
		}
		break;
		
		case(221):
		case(222):
		locationname="Hub";
		location=(25);
		
		switch(trader.Param[(104)])
		{
			case(2511):
			npctrader="Mitch";
			type=(21);
			break;
			case(2510):
			npctrader="Beth";
			type=(22);
			break;
			case(2509):
			npctrader="Jacob";
			type=(23);
			break;
			case(2519):
			npctrader="Mrs. Stapleton";
			type=(24);
			break;
			
			default:if(!GMCreated)npctrader="NOT RECOGNIZED CritterID: "+trader.Id;type=(27);break;
		}
		break;
		
		case(141):
		locationname="Necropolis";
		location=(24);
		
		switch(trader.Param[(104)])
		{
			case(1110):
			npctrader="Shopkeeper";
			type=(21);
			break;
			
			default:if(!GMCreated)npctrader="NOT RECOGNIZED CritterID: "+trader.Id;type=(27);break;
		}
		break;
		
		case(553):
		locationname="Boneyard Train Station";
		location=(353);
		
		switch(trader.Param[(104)])
		{
			case(9446):
			npctrader="Taylor";
			type=(21);
			break;
			
			default:if(!GMCreated)npctrader="NOT RECOGNIZED CritterID: "+trader.Id;type=(27);break;
		}
		break;
		
		case(280):
		locationname="Adytum";
		location=(26);
		
		switch(trader.Param[(104)])
		{
			case(9455):
			npctrader="Jargo";
			type=(21);
			break;
			
			case(9441):
			npctrader="Ralph";
			type=(22);
			break;
			
			default:if(!GMCreated)npctrader="NOT RECOGNIZED CritterID: "+trader.Id;type=(27);break;
		}
		break;                  
		
		case(112):
		
		locationname="Khans's Base";
		location=(27);
		
		switch(trader.Param[(104)])
		{
			case(2721):
			npctrader="Augustus";
			type=(21);
			break;
			
			case(2719):
			npctrader="Art";
			type=(22);
			break;
			
			default:if(!GMCreated)npctrader="NOT RECOGNIZED CritterID: "+trader.Id;type=(27);break;
		}
		break;
		
		case(566):
		locationname="Gordnon's Gas Station";
		location=(364);
		
		switch(trader.Param[(104)])
		{
			case(10700):
			npctrader="Gordon";
			type=(21);
			break;
			
			default:if(!GMCreated)npctrader="NOT RECOGNIZED CritterID: "+trader.Id;type=(27);break;
		}
		break;
		
		case(599):
		locationname="Las Vegas";
		location=(94);
		switch(trader.Param[(104)])
		{
			case(8849):
			npctrader="Paul";
			type=(21);
			break;
			
			case(8850):
			npctrader="Tony";
			type=(22);
			break;
			
			case(8851):
			npctrader="Woody";
			type=(23);
			break;
			
			case(702):
			npctrader="Some bartender";
			type=(24);
			break;
			
			default:if(!GMCreated)npctrader="NOT RECOGNIZED CritterID: "+trader.Id;type=(27);break;
		}
		break;
		
		case(606):
		locationname="Salt Lake City";
		location=(95);
		switch(trader.Param[(104)])
		{
			case(8900):
			npctrader="Roger";
			type=(21);
			break;
			
			case(8901):
			npctrader="Steven";
			type=(22);
			break;
			
			case(8902):
			npctrader="Joe";
			type=(23);
			break;
			
			case(8904):
			npctrader="Pharmacist";
			type=(24);
			break;
			
			default:if(!GMCreated)npctrader="NOT RECOGNIZED CritterID: "+trader.Id;type=(27);break;
		}
		break;
		
		case(664):
		locationname="Social Accommodation of Hawthorne Military Base";
		location=(99);
		switch(trader.Param[(104)])
		{
			case(9000):
			npctrader="Joe";
			type=(21);
			break;
			
			case(9001):
			npctrader="Fernandez";
			type=(22);
			break;
			
			default:if(!GMCreated)npctrader="NOT RECOGNIZED CritterID: "+trader.Id;type=(27);break;
		}
		break;
		
		default:
		locationname="NOT DEFINED IN SWITCH-CASE MapProtoID: "+map.GetProtoId()+",LocationProtoID: "+location;
		npctrader="NOT RECOGNIZED CritterID: "+trader.Id;
		type=(27);
		break;
	}    
	
	Item@it=trader.AddItem(item,ilosc);
	((it.Flags)=(it.Flags)|((0x00000200)));
	
	if(!it.IsStackable())
	switch(itemkind)
	{
		case 2:
		case 3:
		case 5:
		case 6:AddSpecialBonus(it);break;
		default:AddBonusOrNot(it);break;
	}
	
	baseprice=it.GetCost();
	podniesienieceny=it.GetCost(); 
	
	if(it.Val0>=100)
	{
		bonustype=" Quality ";
		it.Cost=3*(baseprice+podniesienieceny/2);
	}
	
	if(it.Val1>=100)
	{
		bonustype=" Improved ";
		it.Cost=4*(baseprice+podniesienieceny/2);
	}
	
	if(it.Val2>=100)
	{
		bonustype=" Superior ";
		it.Cost=5*(baseprice+podniesienieceny/2);
	}
	
	if(it.Val3>=100)
	{
		bonustype=" Advanced ";
		it.Cost=6*(baseprice+podniesienieceny/2);
	}
	
	if(it.Val4>=100)
	{
		bonustype=" Unique ";
		it.Cost=7*(baseprice+podniesienieceny/2);
	}
	
	if(it.IsStackable())
	{
		if(it.GetType()==(4))
		{
			ilosc=Random(10,100);
			trader.AddItem(item,ilosc-1);
			bonustype=" "+ilosc+" pcs of ";
		}
		stackable=1;
	}  
	
	array<uint>eventdata={trader.Id,item,ilosc,location,type,it.Id,stackable,values[1]};
	CreateTimeEvent(((__FullSecond)+(timeleft)),"e_SpecialItemEventErase",eventdata,true);
	CreateTimeEvent(((__FullSecond)+(((1)*__TimeMultiplier))),"e_SpecialItemSold",eventdata,false);
	
	if(trader.IsNpc())
	trader.StatBase[(84)]=((1)*60); 
	
	if(GMCreated)
	ServerEventCNTSet((trader.IsPlayer()?trader.Name:npctrader)+" in "+(GetLocationName(trader.GetMap().GetLocation().Id))+" has"+bonustype+itemname+" for sale. Time left %COUNTDOWN%.",location,type,timeleft);
	else
	ServerEventCNTSet(npctrader+" in "+locationname+" has"+bonustype+itemname+" for sale. Time left %COUNTDOWN%.",location,type,timeleft);
	
	if(GMCreated)return 0;
	else return((Random(360,14400))*__TimeMultiplier*60);
}

uint e_SpecialItemEventErase(array<uint>@values)
{
	
	Critter@trader=GetCritter(values[0]);
	if(!(@trader!=null))
	return 0;
	uint item=values[1],ilosc=values[2],location=values[3],type=values[4],liczitemy;
	uint8 stackable=values[6];
	
	if(stackable==1)
	{
		
		liczitemy=trader.CountItem(item);
		trader.DeleteItem(item,liczitemy);
		if(liczitemy!=0)
		{
			ServerEventMSG((30),"No offers.");
			if(trader.IsNpc())
			trader.StatBase[(84)]=((10)*60);
		}
	}
	
	else if(stackable==0)
	{
		Item@it=GetItem(values[5]);
		if(!(@it!=null))
		return 0;
		
		array<Item@>items;
		uint itemCount=trader.GetItems((0),items);
		
		for(uint i=0;i<itemCount;i++)
		if(items[i].Id==it.Id)
		{
			DeleteItem(it);
			ServerEventMSG((30),"No offers.");
			if(trader.IsNpc())
			trader.StatBase[(84)]=((10)*60);
		}
		
		itemCount=trader.GetItems((1),items);
		for(uint i=0;i<itemCount;i++)
		if(items[i].Id==it.Id)
		{
			DeleteItem(it);
			ServerEventMSG((30),"No offers.");
			if(trader.IsNpc())
			trader.StatBase[(84)]=((10)*60);
		}
	}
	
	return 0;
}

uint e_SpecialItemSold(array<uint>@values)
{
	bool sold=false;
	bool GMCreated=(values[7]==0?false:true);
	
	Critter@trader=GetCritter(values[0]);
	if(!(@trader!=null))
	return 0;
	
	Item@it=GetItem(values[5]);
	if(!(@it!=null))
	return 0;
	
	uint item=values[1],location=values[3],type=values[4];
	uint8 stackable=values[6];
	
	if(stackable==1)
	if(trader.CountItem(item)==0&&(@it!=null))
	{
		sold=true;
	}
	
	if(stackable==0&&(@it!=null))
	{
		array<Item@>items;
		uint itemCount=trader.GetItems((0),items);
		sold=true;
		for(uint i=0;i<itemCount;i++)
		if(items[i].Id==it.Id)
		sold=false;
		itemCount=trader.GetItems((1),items);
		for(uint i=0;i<itemCount;i++)
		if(items[i].Id==it.Id)
		sold=false;
	}
	
	if(sold)
	{
		string locationname,npctrader="This someone";
		
		Map@map=trader.GetMap();
		(it.Flags=((it.Flags)&(~((0x00000200)))));
		
		switch(map.GetProtoId())
		{
			case(6):
			locationname="Den";
			location=(1);
			
			switch(trader.Param[(104)])
			{
				case(114):
				npctrader="Flick";
				type=(21);
				break;
				case(107):
				npctrader="Mom";
				type=(22);
				break;
				case(115):
				npctrader="Rebecca";
				type=(23);
				break;
				case(119):
				npctrader="Tubby";
				type=(24);
				break;
				case(120):
				npctrader="Frank";
				type=(25);
				break;
				
				default:if(!GMCreated)npctrader="NOT RECOGNIZED CritterID: "+trader.Id;type=(27);break;
			}
			break;
			
			case(9):
			locationname="Klamath";
			location=(2);
			
			switch(trader.Param[(104)])
			{
				case(209):
				npctrader="Maida Buckner";
				type=(21);
				break;
				default:if(!GMCreated)npctrader="NOT RECOGNIZED CritterID: "+trader.Id;type=(27);break;
			}
			break;
			
			case(18):
			locationname="Modoc";
			location=(3);
			
			switch(trader.Param[(104)])
			{
				case(307):
				npctrader="Grisham";
				type=(21);
				break;
				case(301):
				npctrader="Jo";
				type=(22);
				break;
				case(303):
				npctrader="Balthas";
				type=(23);
				break;
				case(300):
				npctrader="Mook";
				type=(24);
				break;
				default:if(!GMCreated)npctrader="NOT RECOGNIZED CritterID: "+trader.Id;type=(27);break;
			}
			break;
			
			case(16):
			locationname="Vault City";
			location=(4);
			
			switch(trader.Param[(104)])
			{
				case(429):
				npctrader="McRae";
				type=(21);
				break;
				case(425):
				npctrader="Harry";
				type=(22);
				break;
				case(409):
				npctrader="Doctor Andrew";
				type=(23);
				break;
				case(437):
				npctrader="Randal";
				type=(24);
				break;
				case(416):
				npctrader="Darrow";
				type=(25);
				break;
				case(420):
				npctrader="Holden";
				type=(26);
				break;
				default:if(!GMCreated)npctrader="NOT RECOGNIZED CritterID: "+trader.Id;type=(27);break;
			}
			break;
			
			case(31):
			locationname="Gecko";
			location=(5);
			
			switch(trader.Param[(104)])
			{
				case(516):
				npctrader="Wooz";
				type=(21);
				break;
				case(513):
				npctrader="Percy";
				type=(22);
				break;
				case(515):
				npctrader="Skeeter";
				type=(23);
				break;
				default:if(!GMCreated)npctrader="NOT RECOGNIZED CritterID: "+trader.Id;type=(27);break;
			}
			break;
			
			case(62):
			locationname="Redding";
			location=(13);
			
			switch(trader.Param[(104)])
			{
				case(1305):
				npctrader="Ascorti";
				type=(21);
				break;
				case(1300):
				npctrader="Doc Johnson";
				type=(22);
				break;
				default:if(!GMCreated)npctrader="NOT RECOGNIZED CritterID: "+trader.Id;type=(27);break;
			}
			break;
			
			case(115):
			locationname="Broken Hills";
			location=(6);
			
			switch(trader.Param[(104)])
			{
				case(621):
				npctrader="Liz";
				type=(21);
				break;
				case(630):
				npctrader="Bill";
				type=(22);
				break;
				case(631):
				npctrader="Phil";
				type=(23);
				break;
				case(620):
				npctrader="Jacob";
				type=(24);
				break;
				case(609):
				npctrader="Doc Holliday";
				type=(25);
				break;
				
				default:if(!GMCreated)npctrader="NOT RECOGNIZED CritterID: "+trader.Id;type=(27);break;
			}
			break;
			
			case(54):
			case(55):
			case(56):
			case(265):
			case(266):
			locationname="New Reno";
			location=(7);
			
			switch(trader.Param[(104)])
			{
				case(744):
				npctrader="Flick";
				type=(21);
				break;
				case(702):
				npctrader="Some bartender";
				type=(22);
				break;
				case(741):
				npctrader="Eldridge";
				type=(23);
				break;
				case(760):
				npctrader="Renesco";
				type=(24);
				break;
				
				default:if(!GMCreated)npctrader="NOT RECOGNIZED CritterID: "+trader.Id;type=(27);break;
			}
			break;
			
			case(45):
			locationname="NCR";
			location=(10);
			
			switch(trader.Param[(104)])
			{
				case(1048):
				npctrader="Seumour";
				type=(21);
				break;
				case(1002):
				npctrader="Buster";
				type=(22);
				break;
				case(1004):
				npctrader="Mira";
				type=(23);
				break;
				case(1024):
				npctrader="Dusty";
				type=(24);
				break;
				case(1026):
				npctrader="Doc Jubilee";
				type=(25);
				break;
				
				default:if(!GMCreated)npctrader="NOT RECOGNIZED CritterID: "+trader.Id;type=(27);break;
			}
			break;
			
			case(135):
			case(137):
			locationname="San Francisco";
			location=(14);
			
			switch(trader.Param[(104)])
			{
				case(1405):
				npctrader="Fung";
				type=(21);
				break;
				case(1403):
				npctrader="Chou";
				type=(22);
				break;
				case(1416):
				npctrader="Cal";
				type=(23);
				break;
				case(1415):
				npctrader="Jenna";
				type=(24);
				break;
				case(1413):
				npctrader="Slim";
				type=(25);
				break;
				case(1402):
				npctrader="Ma Da Chiang";
				type=(26);
				break;
				
				default:if(!GMCreated)npctrader="NOT RECOGNIZED CritterID: "+trader.Id;type=(27);break;
			}
			break;
			
			case(70):
			locationname="Junktown";
			location=(17);
			
			switch(trader.Param[(104)])
			{
				case(1703):
				npctrader="Jeremiah";
				type=(21);
				break;
				
				default:if(!GMCreated)npctrader="NOT RECOGNIZED CritterID: "+trader.Id;type=(27);break;
			}
			break;
			
			case(221):
			case(222):
			locationname="Hub";
			location=(25);
			
			switch(trader.Param[(104)])
			{
				case(2511):
				npctrader="Mitch";
				type=(21);
				break;
				case(2510):
				npctrader="Beth";
				type=(22);
				break;
				case(2509):
				npctrader="Jacob";
				type=(23);
				break;
				case(2519):
				npctrader="Mrs. Stapleton";
				type=(24);
				break;
				
				default:if(!GMCreated)npctrader="NOT RECOGNIZED CritterID: "+trader.Id;type=(27);break;
			}
			break;
			
			case(142):
			locationname="Necropolis";
			location=(24);
			
			switch(trader.Param[(104)])
			{
				case(1110):
				npctrader="Shopkeeper";
				type=(21);
				break;
				
				default:if(!GMCreated)npctrader="NOT RECOGNIZED CritterID: "+trader.Id;type=(27);break;
			}
			break;
			
			case(553):
			locationname="Boneyard Train Station";
			location=(353);
			
			switch(trader.Param[(104)])
			{
				case(9446):
				npctrader="Taylor";
				type=(21);
				break;
				
				default:if(!GMCreated)npctrader="NOT RECOGNIZED CritterID: "+trader.Id;type=(27);break;
			}
			break;
			
			case(280):
			locationname="Adytum";
			location=(26);
			
			switch(trader.Param[(104)])
			{
				case(9455):
				npctrader="Jargo";
				type=(21);
				break;
				
				case(9441):
				npctrader="Ralph";
				type=(22);
				break;
				
				default:if(!GMCreated)npctrader="NOT RECOGNIZED CritterID: "+trader.Id;type=(27);break;
			}
			break;               
			
			case(112):
			
			locationname="Khans's Base";
			location=(27);
			
			switch(trader.Param[(104)])
			{
				case(2721):
				npctrader="Augustus";
				type=(21);
				break;
				case(2719):
				npctrader="Art";
				type=(22);
				break;
				
				default:if(!GMCreated)npctrader="NOT RECOGNIZED CritterID: "+trader.Id;type=(27);break;
			}
			break;
			
			case(566):
			locationname="Gordnon's Gas Station";
			location=(364);
			
			switch(trader.Param[(104)])
			{
				case(10700):
				npctrader="Gordon";
				type=(21);
				break;
				
				default:if(!GMCreated)npctrader="NOT RECOGNIZED CritterID: "+trader.Id;type=(27);break;
			}
			break;
			
			case(599):
			locationname="Las Vegas";
			location=(94);
			switch(trader.Param[(104)])
			{
				case(8849):
				npctrader="Paul";
				type=(21);
				break;
				
				case(8850):
				npctrader="Tony";
				type=(22);
				break;
				
				case(8851):
				npctrader="Woody";
				type=(23);
				break;
				
				case(702):
				npctrader="Some bartender";
				type=(24);
				break;
				
				default:if(!GMCreated)npctrader="NOT RECOGNIZED CritterID: "+trader.Id;type=(27);break;
			}
			break;
			
			case(606):
			locationname="Salt Lake City";
			location=(95);
			switch(trader.Param[(104)])
			{
				case(8900):
				npctrader="Roger";
				type=(21);
				break;
				
				case(8901):
				npctrader="Steven";
				type=(22);
				break;
				
				case(8902):
				npctrader="Joe";
				type=(23);
				break;
				
				case(8904):
				npctrader="Pharmacist";
				type=(24);
				break;
				
				default:if(!GMCreated)npctrader="NOT RECOGNIZED CritterID: "+trader.Id;type=(27);break;
			}
			break;
			
			case(664):
			locationname="Social Accommodation of Hawthorne Military Base";
			location=(99);
			switch(trader.Param[(104)])
			{
				case(9000):
				npctrader="Joe";
				type=(21);
				break;
				
				case(9001):
				npctrader="Fernandez";
				type=(22);
				break;
				
				default:if(!GMCreated)npctrader="NOT RECOGNIZED CritterID: "+trader.Id;type=(27);break;
			}
			break;
			
			default:
			locationname="NOT DEFINED IN SWITCH-CASE";
			if(!GMCreated)npctrader="NOT RECOGNIZED CritterID: "+trader.Id;
			break;
		}
		
		ServerEventCNTStop(location,type);
		if(trader.IsNpc())
		trader.StatBase[(84)]=((10)*60);
		if(GMCreated)
		ServerEventMSG((30),(trader.IsPlayer()?trader.Name:npctrader)+" has sold item.");
		else
		ServerEventMSG((30),npctrader+" has sold item.");
		return 0;
	}
	
	return((1)*__TimeMultiplier);
}

bool IsStackItemFromEvent(uint16 pid)
{
	return(pid==(359)||pid==(358));
}                          

uint[][]sg1={{(313),1},{(18),1},{(10),1},{(283),1},{(94),1},{(385),1},{(332),1},{(31),20},{(29),50},{(121),10},{(95),30},{(574),10},{(575),10},{(357),20}};

uint[][]sg2={{(22),1},{(23),1},{(9),1},{(242),1},{(95),30},{(574),20},{(576),10},{(575),20},{(35),250},{(33),100},{(621),10},{(620),1},{(619),1},{(34),100}};
uint[][]sg3={{(143),1},{(268),1},{(241),1},{(353),1},{(296),1},{(354),1},
	{(621),10},{(620),1},{(619),1},{(36),250},{(95),50},{(574),20},{(575),20},{(576),20},{(30),50}};

uint[][]bg1={{(11),1},{(13),1},{(32),10},{(14),1},{(363),100},{(387),1}};
uint[][]bg2={{(36),250},{(708),10},{(37),8},{(35),250},{(34),100},
	{(12),1},{(355),1},{(389),1}};
uint[][]bg3={};

uint[][]en1={{(118),1},{(38),30}};
uint[][]en2={{(15),1},{(116),1},{(24),1},{(235),1},{(39),150},{(26),5},{(52),1},{(59),1}};
uint[][]en3={};

uint[][]arm1={{(750),1},{(1),1},{(379),1},{(265),1},{(276),1},{(277),1},{(1803),1},{(729),1},{(730),1},{(731),1}};
uint[][]arm2={{(240),1},{(17),1},{(2),1},{(380),1},{(381),1},{(725),1},{(726),1},{(732),1},{(733),1},{(734),1}};
uint[][]arm3={};

uint[][]drug1={{(87),1},{(53),1},{(110),1},{(48),1},{(109),1},{(259),1}};
uint[][]drug2={};
uint[][]drug3={};

uint[][]med1={{(40),1},{(144),1},{(273),1},{(49),1},{(260),1},{(361),10},{(362),10},{(388),1}};
uint[][]med2={};
uint[][]med3={};

uint[][]misc1={{(4),5},{(7),1},{(45),5},{(6),1},{(127),1},{(276),1},{(277),1},{(1803),1},
	{(543),1},{(609),1},{(84),1},{(549),1},{(58),1},{(542),1}};
uint[][]misc2={{(115),1},{(276),1},{(277),1},{(1803),1},{(25),5}};
uint[][]misc3={};

uint[][]books1={{(225),1},{(228),1},{(237),1},{(22050),1},{(80),1},{(86),1},{(102),1},{(73),1},{(76),1}};
uint[][]books2={};
uint[][]books3={};

uint[][]craft1={{(22073),1},{(22074),1},{(22075),1},{(22076),1},{(22077),1},{(22078),1},{(22089),1},{(22090),1},{(22091),1},{(22092),1},{(22093),1},{(22094),1},{(22088),1},{(22079),1},{(22080),1},{(22081),1},{(22082),1},{(22083),1},{(22084),1},{(22085),1},{(22086),1},{(22087),1}};
uint[][]craft2={};
uint[][]craft3={};

uint[][]@[]lists={sg1,sg2,sg3,bg1,bg2,bg3,en1,en2,en3,arm1,arm2,arm3,drug1,drug2,drug3,med1,med2,med3,misc1,misc2,misc3,books1,books2,books3,craft1,craft2,craft3};
