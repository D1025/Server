

import Location@GetLocationOf(Critter&critter)from"utils";
import string GetLocationName(uint locId)from"utils";
import string GetLocationName(Location@loc)from"utils";
import bool ReadPids(array<int>&out pids,bool removeinvalid)from"utils";
import void ReadDefines(string@fileName,dictionary&items,array<string>@defines)from"utils";
import bool ParseDefine(const string&in line,string&out spid,int&out id)from"utils";
import int SkipWhitespaces(const string&in str,int start)from"utils";
import int SkipNonWhitespaces(const string&in str,int start)from"utils";
import bool IsParameterTag(string&str)from"utils";
import string GetParameterString(array<string@>@arr,string&parameter)from"utils";
import int GetIndexOfString(array<string@>@arr,string&str)from"utils";
import string GetConcatenatedString(array<string@>@arr,uint startindex,int stopindex)from"utils";
import string GetConditionOfCritter(Critter@cr)from"utils";
import string GetExtConditionOfCritter(Critter@cr)from"utils";
import uint GetAllOnlinePlayers(array<Critter@>&out players)from"utils";
import uint GetAuthenticatedPlayers(array<Critter@>&out players)from"utils";
import uint GetAuthenticatedPlayers(array<Critter@>&out players,bool ignorePriviledges)from"utils";
import uint GetNumberOfPlayersOnline()from"utils";
import void SetTurnBasedAvailability(Location@loc)from"utils";
import bool IsGuarded(Map@map)from"utils";
import bool IsPublic(Map@map)from"utils";
import bool IsEncounterMap(Map@map)from"utils";
import bool IsTown(Map@map)from"utils";
import bool IsDungeon(Map@map)from"utils";
import bool IsBaseControl(Map@map)from"utils";

import uint GetMapType(Map@map)from"utils";
import void LockDoor(uint x,uint y,Map@map,uint complexity,uint lockid)from"utils";
import void UnlockDoor(uint x,uint y,Map@map)from"utils";
import void ClearContainer(Item@container)from"utils";
import void MoveItemsCritterToCont(Critter&crFrom,Item&contTo,uint specid)from"utils";
import string GetCritterInfo(Critter&cr)from"utils";
import bool AddExpTeam(Critter&critter,int xp)from"utils";
import void ClearEnemyStack(Critter&critter)from"utils";
import void ClearEnemyStacksOnMap(Map@map)from"utils";
import bool IsCurrentEnemy(Critter&cr,uint targetId)from"utils";
import string@GetSafePlayerName(uint id)from"utils";
import string GetSafePlayerName(uint id,string&onSuccess,string&onError)from"utils";
import IDateTime@GetCurrentDateTime()from"utils";
import string GetCurrentDateTimeString()from"utils";
import string GetCurrentDateTimeString(bool date,bool time)from"utils";
import Critter@GetMostSkilled(array<Critter@>@group,int skill)from"utils";
import string GetAuthString(Critter&player)from"utils";
import string GetAuthString(int accesslevel)from"utils";
import bool CanRequestHelp(Critter&player)from"utils";
import void SetRequestedHelp(Critter&player)from"utils";
import void SetRequestedHelp(Critter&player,int minutes)from"utils";
import Critter@GetOnlineGM()from"utils";
import void Preprocess(Critter&player,string&commandString)from"utils";
import bool IsHumanoid(Critter@cr)from"utils";
import uint GetGroupIndex(Critter&cr)from"utils";
import uint GetGroupIndex(int st)from"utils";
import void SetGroupIndex(Critter&cr,uint val)from"utils";
import uint GetGroupRank(Critter&cr)from"utils";
import void SetGroupRank(Critter&cr,uint val)from"utils";
import uint GetGroupMode(Critter&cr)from"utils";
import void SetGroupMode(Critter&cr,uint val)from"utils";
import void SetGroupInfo(Critter&cr,uint faction,uint rank,uint mode)from"utils";
import void SetGroupInfoPack(Critter&cr,uint packInfo)from"utils";
import void ClearEvents(Critter&cr)from"utils";

import int GetGvar(uint gvar)from"utils";
import void SetGvar(uint gvar,uint value)from"utils";
import int GetLLvar(Location&location,uint llvar)from"utils";
import int GetLLvar(uint locationId,uint llvar)from"utils";
import void SetLLvar(Location&location,uint llvar,uint value)from"utils";
import int GetLMvar(Map&map,uint llvar)from"utils";
import int GetLMvar(uint mapId,uint llvar)from"utils";
import void SetLMvar(Map&map,uint llvar,uint value)from"utils";
import int GetLIvar(Item&item,uint llvar)from"utils";
import int GetLIvar(uint itemId,uint llvar)from"utils";
import void SetLIvar(Item&item,uint llvar,uint value)from"utils";
import int GetLvar(Critter&critter,uint lvar)from"utils";
import int GetLvar(uint id,uint lvar)from"utils";
import void SetLvar(Critter&critter,uint lvar,uint value)from"utils";
import void SetLvar(uint id,uint lvar,uint value)from"utils";
import int GetUvar(uint uvar,uint key,uint index)from"utils";
import void SetUvar(uint uvar,uint key,uint index,uint value)from"utils";

import uint GetContainerValue(Item@container)from"utils";
import uint BaseItemValue(uint pid,bool ammo)from"utils";
import uint BaseItemValue(uint pid,uint broken,uint det,bool ammo)from"utils";
import uint BaseItemValue(Item@item)from"utils";
import uint BaseItemValue(Item@item,uint proc)from"utils";
import uint BaseSingleItemValue(Item@item)from"utils";
import uint BaseSingleItemValue(Item@item,uint proc)from"utils";

import void SetBloodType(Critter@cr)from"utils";
import string GetBloodType(Critter@cr)from"utils";
import string GetBloodRandom()from"utils";

import void LogCommandUsage(Critter&player,string&commandString)from"utils";
import void DropTimeouts(Critter&cr)from"utils";

import bool HasItem(Critter@cr,uint pid)from"utils";
import bool HasSomeWeapon(Critter@cr)from"utils";
import uint GetBestWeaponSkill(Critter@cr)from"utils";
import void GiveBag(uint bag,Critter@cr)from"utils";
import void SetQuestGarbager(uint time,uint playerid,uint locid,uint var,uint val)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,bool isMob,uint level)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,uint factionRank,uint factionMode,bool isMob,uint level)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,array<int>params,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,bool isMob,uint level)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,array<int>params,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,uint factionRank,uint factionMode,bool isMob,uint level)from"utils";
import void AddScore(Critter@cr,uint score,uint points)from"utils";

import bool ReloadWeapon(Critter&cr)from"utils";
import Item@GetRadio(Critter&cr)from"utils";
import Item@GetRepairTool(Critter&cr)from"utils";
import Item@GetEquippedItem(Critter&cr,uint Pid)from"utils";
import Item@GetEquippedItem(Critter&cr,array<uint>&Pids)from"utils";
import Item@GetEquippedItemByType(Critter&cr,uint ItemType)from"utils"; 

import bool SkillRoll(Critter@cr,int skill,int bonus)from"utils";
import int SkillCheck(Critter&cr,int skill,int skillused,Item@item,int bonus)from"utils";
import string SkillName(uint8 skill)from"utils";
import void ChangeCrTypeSafe(Critter&cr,uint8 crType)from"utils";

import bool Pickable(Item@item)from"utils";

import void TransferItemsToContOnMap(Critter&cr,Map@map,int entid,int contpid,int itemtypes)from"utils";
import void TransferItemsFromContOnMap(Critter&cr,Map@map,int entid,int contpid)from"utils";

import string IpToString(uint ip)from"utils";

import void VerboseAction(Critter&cr,string&text)from"utils";
import void VerboseAction(Critter&cr,Critter&target,string&text)from"utils";
import void VerboseExperience(Critter&cr,int xpDiff,int levelDiff)from"utils";

import void SetChosenActions(Critter&cr,array<int>&actions)from"utils";

import void HexLine(uint16 x0,uint16 y0,uint16 x1,uint16 y1,array<uint16>@xList,array<uint16>@yList)from"utils";
import void HexCircle(uint16 x0,uint16 y0,uint16 radius,array<uint16>@xList,array<uint16>@yList)from"utils";

import void StartPersonalDataCleanup()from"utils";

import bool IsPersonalData(Location&location,string&name)from"utils";
import bool GetPersonalData(Location&location,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Location&location,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Location&location,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Location&location,string&name)from"utils";

import bool IsPersonalData(Map&map,string&name)from"utils";
import bool GetPersonalData(Map&map,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Map&map,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Map&map,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Map&map,string&name)from"utils";

import bool IsPersonalData(Critter&critter,string&name)from"utils";
import bool GetPersonalData(Critter&critter,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Critter&critter,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Critter&critter,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Critter&critter,string&name)from"utils";

import bool IsPersonalData(Item&item,string&name)from"utils";
import bool GetPersonalData(Item&item,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Item&item,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Item&item,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Item&item,string&name)from"utils";

import bool FindPreferredGridApprox(Map&map,uint16&hx,uint16&hy)from"utils";           

import bool StrToInt(string@s,uint64&inout val)from"strtoint";
import bool StrToInt(string@s,uint&inout val)from"strtoint";
import bool StrToInt(string@s,uint16&inout val)from"strtoint";
import bool StrToInt(string@s,uint8&inout val)from"strtoint";
import bool StrToInt(string@s,int64&inout val)from"strtoint";
import bool StrToInt(string@s,int16&inout val)from"strtoint";
import bool StrToInt(string@s,int8&inout val)from"strtoint";    

import int FindInArray(array<int>&arr,int value)from"utils";
import int FindInArray(array<uint>&arr,uint value)from"utils";
import int FindInArray(array<uint16>&arr,uint16 value)from"utils";
import int FindInArray(array<uint8>&arr,uint8 value)from"utils";
import bool FindInArray(array<int>&arr,int id,int&index)from"utils";
import bool FindInArray(array<uint>&arr,uint id,int&index)from"utils";
import bool FindInArray(array<uint8>&arr,uint8 id,int&index)from"utils";
import int FindInArray(array<string>&arr,string&value)from"utils";
import int FindInArray(array<string@>@arr,string&value)from"utils";
import bool Present(int what,array<int>&where)from"utils";
import bool Present(uint what,array<uint>&where)from"utils";
import bool Present(uint16 what,array<uint16>&where)from"utils";
import bool Present(string&what,array<string>&where)from"utils";
import bool Present(string&what,array<string@>@where)from"utils";

import uint CreateLocationForGroup(Critter&player,uint16 pid,uint16 worldX,uint16 worldY,array<Critter@>&)from"utils";
import bool FindFirstFreeHex(Map@map,uint16&x,uint16&y,uint8 dir,uint16 maxSteps)from"utils";
import bool FindNearestFreeHex(Map&map,uint16&x,uint16&y,uint radius)from"utils";

import bool GetItemCoordinates(Item&item,uint&mapID,uint16&x,uint16&y)from"utils";
import bool ItemOnHex(uint16 pid,Map@map,uint16 x,uint16 y)from"utils";

import void PrintCallstack()from"utils";
import void PrintCallstack(int level)from"utils";

import bool LocationHasCritters(Location&loc,uint findType)from"utils";
import uint LocationGetCritters(Location&loc,uint findType,array<Critter@>@critters)from"utils";
import uint LocationGetPlayersAndFollowers(Location&loc,uint findType,array<Critter@>@critters)from"utils";
import uint MapGetPlayersAndFollowers(Map&map,uint findType,array<Critter@>@critters)from"utils";
import uint CritterGetPlayersAndFollowers(Critter&critter,bool lookOnMe,uint findType,array<Critter@>@critters)from"utils";
import bool LocationHasItems(Location&loc,uint16 protoId)from"utils";
import uint LocationGetItems(Location&loc,uint16 protoId,array<Item@>@items)from"utils";
import void LocationDeleteItems(Location&loc,uint16 protoId)from"utils";

import bool IsDisposableEncounter(Location@loc)from"utils";

import bool IsT4Item(Item&item)from"utils";
import bool IsT3Item(Item&item)from"utils";
import uint16 AddT3Item()from"utils";
import uint16 AddT4Item()from"utils";
import uint16 AddImplant()from"utils";
import uint16 AddT4BP()from"utils";
import uint16 AddRareAmmo()from"utils";
import uint16 AddTypicalAmmo()from"utils";

import void SetDeterioration(Item&item)from"utils";  

shared class CPosition
{
	uint x;
	uint y;
	uint dir;
};

shared interface IRect
{
	bool IsWithin(Critter&cr);
};

shared class Rect:IRect
{
	uint x1;
	uint y1;
	uint x2;
	uint y2;
	
	Rect(uint x1,uint y1,uint x2,uint y2)
	{
		this.x1=x1;
		this.y1=y1;
		this.x2=x2;
		this.y2=y2;
	}
	
	bool IsWithin(Critter&cr)
	{
		return((cr.HexX>=this.x1&&cr.HexX<=this.x2)&&(cr.HexY>=this.y1&&cr.HexY<=this.y2));
	}
};

shared interface IDateTime
{
	uint16 get_Year();
	uint16 get_Month();
	uint16 get_DayOfWeek();
	uint16 get_Day();
	uint16 get_Hour();
	uint16 get_Minute();
	uint16 get_Second();
	uint16 get_Milliseconds();
	string@ToString();
};                                                                                                                                                      

const string@FD_Result2String(int res)
{
	if(res==(0))
	return"FD_RESULT_SUCCESS";
	else if(res==(1))
	return"FD_RESULT_ALREADY_EXISTS";
	else if(res==(2))
	return"FD_RESULT_NOT_FOUND";
	else if(res==(3))
	return"FD_RESULT_ANY_DATA_ERROR";
	else if(res==(4))
	return"FD_RESULT_INVALID_ARGUMENT";
	else if(res==(5))
	return"FD_RESULT_LVAR_ERROR";
	else if(res==(6))
	return"FD_RESULT_DB_NOT_FOUND";
	else if(res==(7))
	return"FD_RESULT_DB_FULL";
	else if(res==(8))
	return"FD_RESULT_DB_EMPTY";
	else
	return"FD_Result: Unknown error code";
}      

import bool IsBigFaction(uint faction)from"factions";
import bool IsTheSameFaction(uint player1Id,uint player2Id)from"factions";
import void _Resign(uint playerId)from"factions"; 

import int RegisterFaction(uint id,const string@name,bool playerDriven)from"factions";
import int RegisterFaction(const string@name,bool playerDriven,uint&out id)from"factions";

import bool RemoveFaction(uint faction)from"factions"; 

import bool GetFactionNameStr(uint faction,string&out name)from"factions";
import bool GetFactionId(const string@name,uint&out id)from"factions"; 

import bool IsFactionNameFree(const string&)from"factions";
import bool IsFactionNameValid(const string&)from"factions";

import bool IsGang(uint faction)from"factions";

import uint16 GetFactionRadioChannel(uint faction)from"factions";
import void SetFactionRadioChannel(uint faction,uint16 channel)from"factions"; 

import int AddPlayer(uint faction,uint id)from"factions";
import int AddPlayer(uint faction,uint id,uint playerFaction)from"factions";
import int AddPlayer(uint faction,uint id,uint playerFaction,uint rank)from"factions";
import int AddPlayer(uint faction,uint id,uint playerFaction,uint rank,uint status)from"factions"; 

import int RemovePlayer(uint faction,uint id)from"factions"; 

import int GetFaction(uint faction,uint id)from"factions";
import int GetStatus(uint faction,uint id)from"factions";
import int GetRank(uint faction,uint id)from"factions";
import bool IsMember(uint faction,Critter&cr)from"factions";
import bool IsMemberOffline(uint faction,uint id)from"factions";
import bool StoredInDB(uint faction,uint id)from"factions";
import uint GetRecordsCount(uint faction)from"factions";
import uint GetMembersCount(uint faction)from"factions";
import uint GetMembers(uint faction,array<uint>&ids)from"factions";
import uint GetLeaderId(uint faction)from"factions";
import void SetLeaderId(uint faction,uint id)from"factions";
import uint GetClaimId(uint faction)from"factions";
import void SetClaimId(uint faction,uint id)from"factions";
import uint GetLeaderTime(uint faction)from"factions";
import void SetLeaderTime(uint faction,uint time)from"factions";
import uint GetClaimTime(uint faction)from"factions";
import void SetClaimTime(uint faction,uint time)from"factions";
import uint GetFactionLocationId(uint faction)from"factions";
import bool GetFactionLocation(uint faction,uint&out locId,uint&out pid,uint&out x,uint&out y)from"factions";

import void GetFactionLocationCoords(uint faction,uint&out x,uint&out y)from"factions";

import uint GetFactionScore(uint faction)from"factions";
import void ModifyFactionScore(uint faction,int amount)from"factions";
import void UpdateLastUsed(uint faction)from"factions";
import uint GetFactionsCount()from"factions"; 

import int GetPrevId(uint faction,uint currId,bool members,uint&out prevId)from"factions";
import int GetNextId(uint faction,uint currId,bool members,uint&out nextId)from"factions";
import int GetFirstId(uint faction,bool members,uint&out id)from"factions"; 

import int ModifyRank(uint faction,uint id,uint newRank)from"factions";
import int ModifyStatus(uint faction,uint id,uint newStatus)from"factions";
import int ModifyFaction(uint faction,uint id,uint newFaction)from"factions"; 

import int InvitePlayer(uint faction,uint playerId)from"factions";
import int ConfirmInvitation(uint faction,uint playerId)from"factions";
import int AddMember(uint faction,uint playerId)from"factions";
import int AddMember(uint faction,uint playerId,bool applyModifiers)from"factions";
import int ChangeRank(uint faction,uint playerId,uint newRank)from"factions";
import int ExpelMember(uint faction,uint playerId)from"factions";
import int ExpelMember(uint faction,uint playerId,bool applyModifiers)from"factions";

import uint GetPlayerFaction(uint playerId)from"factions";
import uint GetPlayerRank(uint playerId)from"factions"; 

import void AddFactionNews(uint faction,uint master,uint slave,uint type)from"factions";
import bool GetFactionNews(uint faction,uint index,uint&out master,uint&out slave,uint&out type,uint16&out year,uint8&out month,uint8&out day,uint8&out hour,uint8&out minute)from"factions";
import uint GetFactionNewsCount(uint faction)from"factions"; 

import uint CheckFactionBaseCoords(uint x,uint y)from"factions";

import bool SaveFactionData(uint faction)from"factions";
import bool FactionExists(uint faction)from"factions"; 

import uint GetFactionLog(uint faction,bool fullLog,array<string>&strings,uint begin,uint end)from"factions";   

import void InitFactions()from"factions";
import void UpdateFactionsInfo(Critter&cr)from"factions";
import IFaction@GetFaction(int)from"factions";
import IFaction@GetFaction(const string&)from"factions";
import IFaction@GetFactionByIdx(int idx)from"factions";
import void UpdateGroupVars(Critter&player)from"factions";     

shared interface IFaction
{
	int get_Id()const;
	string get_Name()const;
	int get_StringId()const;
	string get_Database()const;
	int get_UpdateSeq()const;
	void set_UpdateSeq(int);
	
	int GetStatus(int id)const;
	void SetStatus(int id,int status);
	int GetRank(int id)const;
	void SetRank(int id,int rank);   
	
	int GetMembers(array<uint>&)const;
	int GetRecords(array<uint>&)const;  
	
	void AddKnownFaction(int);   
	
	int GetKnownFactions(array<int>&)const;
	void Remove();
}

shared interface IFactionBase
{
	
	uint get_Id()const;
	
	uint get_FactionId()const;
	
	const string&get_Name()const;
	
	uint get_LocationId()const; 
	
	void Show(Critter&cr)const;
	
	void Hide(Critter&cr)const; 
	
	bool IsRankAllowed(int rank)const;
	
	void AllowRank(int rank,bool allow);
	
	bool IsStatusAllowed(int status)const;
	
	void AllowStatus(int status,bool allow); 
	
	void Remove();
};  

import IFactionBase@GetFactionBase(uint faction_id,const string&faction_name)from"factions_bases";
import IFactionBase@GetFactionBase(uint id)from"factions_bases";
import IFactionBase@GetFactionBaseByLocId(uint id)from"factions_bases";
import uint GetFactionBases(uint faction_id,array<IFactionBase@>@)from"factions_bases";
import bool AddFactionBase(IFactionBase&)from"factions_bases";
import void AddFactionBase(uint)from"factions_bases";
import IFactionBase@CreateFactionBase(uint faction_id,const string&name,uint location_id)from"factions_bases";
import void RemoveFactionBase(uint,const string&)from"factions_bases";
import void RemoveFactionBase(IFactionBase&)from"factions_bases";                                                                                                                                                       

int GetRootMapData(Map&map,uint index)
{
	return map.GetLocation().GetMapByIndex(0).GetData(index);
}  

void SetRootMapData(Map&map,uint index,int val)
{
	map.GetLocation().GetMapByIndex(0).SetData(index,val);
}   

int GetRootMapData(Location&loc,uint index)
{
	return loc.GetMapByIndex(0).GetData(index);
}  

void SetRootMapData(Location&loc,uint index,int val)
{
	loc.GetMapByIndex(0).SetData(index,val);
}                                                                                                                                                                                                                                                                                                                                                                                                                      

import void UpdateBasesVisibility(IFaction@faction,Critter&player)from"factions";
import void UpdateOneBaseVisibility(IFaction@faction,Critter&player,IFactionBase@base)from"factions";      

uint GetTerminalFaction(Critter&player)
{
	Map@map=player.GetMap();
	if(!(@map!=null))
	{
		Log("ERR: Couldn't obtain map object");
		return 0;
	}
	uint faction=map.GetData((0));
	if(faction<=(1))
	Log("ERR: Faction id hasn't been assigned to the map");
	return faction;
}  

void IncreaseUpdateSeq(uint faction_id)
{
	IFaction@faction=GetFaction(faction_id);
	faction.UpdateSeq=faction.UpdateSeq+1;
}

bool s_Terminal(Critter&player,Scenery&terminal,int skill,Item@item)
{
	if(!player.IsPlayer()||skill!=-1||(@item!=null))
	return false;
	
	uint faction=GetTerminalFaction(player);
	
	if(faction==0)
	{
		player.Say((11),"This terminal seems to be inactive");
		return false;
	}
	
	RunDialog(player,(9060),terminal.HexX,terminal.HexY,false);
	return true;
}   

void dlg_TerminalWelcome(Critter&player,Critter@terminal,string@text)
{
	if(!((@text!=null)&&text.length()==0))
	return;
	uint faction_id=GetTerminalFaction(player);
	IFaction@faction=GetFaction(faction_id);
	text+="$faction"+faction.Name;
}  

void dlg_FactionName(Critter&player,Critter@terminal,string@text)
{
	if(!((@text!=null)&&text.length()==0))
	return;
	uint faction_id=GetTerminalFaction(player);
	IFaction@faction=GetFaction(faction_id);
	text+="$faction"+faction.Name;
}      

uint dlg_ChoosePlayer(Critter&player,Critter@terminal,string@playerName)
{
	if(!(@playerName!=null)||playerName.length()==0)
	return 0;
	
	GameVar@var=GetLocalVar((3029),player.Id);
	if(!(@var!=null))
	{
		Log("Variable LVAR_terminal_current not defined");
		return 0;
	}
	
	var=0;
	
	uint chosenId=GetPlayerId(playerName);
	if(chosenId==0)
	{
		player.Say((12),"Incorrect name");
		return 0;
	}
	
	uint faction=GetTerminalFaction(player);
	
	if(!StoredInDB(faction,chosenId))
	{
		player.Say((12),"Record not found");
		return 0;
	}
	
	var=chosenId;
	
	return(18);
}  

void dlg_ShowRecord(Critter&player,Critter@npc,string@say)
{
	if(((@say!=null)&&say.length()==0))
	{
		GameVar@var=GetLocalVar((3029),player.Id);
		if(!(@var!=null))
		{
			Log("Variable LVAR_terminal_current not defined");
			return;
		}
		
		uint faction=GetTerminalFaction(player);
		
		uint id=var.GetValue();
		
		uint storedFaction=GetFaction(faction,id);
		uint storedRank=GetRank(faction,id);
		uint storedStatus=GetStatus(faction,id);
		int8 rep=0;
		
		say+=GenerateDescription(id,storedFaction,storedRank,storedStatus,0);
	}
}  

string@GenerateDescription(uint id,uint faction_id,uint rank,uint status,int8 reputation)
{
	string say;
	
	say+="$name"+GetSafePlayerName(id);
	IFaction@faction=GetFaction(faction_id);
	say+="$faction"+faction.Name;
	say+="$rank@msg dlg "+(1000000000+((9060))*100000+((20)+rank))+"@";       
	
	say+="$status@msg dlg "+(1000000000+((9060))*100000+((10)+status))+"@";
	say+="$reputation"+reputation;
	return say;
}       

uint r_SelectMember(Critter&player,Critter@npc,int value)
{
	
	GameVar@var=GetLocalVar((3029),player.Id);
	uint curr=var.GetValue();
	if(!(@var!=null))
	{
		Log("Variable LVAR_terminal_current not defined");
		return(29);
	}
	IFaction@faction=GetFaction(GetTerminalFaction(player));
	array<uint>members;
	int num=faction.GetMembers(members); 
	
	var=members[0];
	
	if(value==1)
	{
		for(int i=0;i<num;i++)
		{
			if(members[i]==curr)
			{
				
				int idx=i+1<num?i+1:0;
				var=members[idx];
				break;
			}
		}
	}
	else if(value==-1)
	{
		for(int i=0;i<num;i++)
		{
			if(members[i]==curr)
			{
				
				int idx=i-1<0?num-1:i-1;
				var=members[idx];
				break;
			}
		}
	}
	return 0;
}        

uint r_SelectRecord(Critter&player,Critter@npc,int value)
{
	
	GameVar@var=GetLocalVar((3029),player.Id);
	uint curr=var.GetValue();
	if(!(@var!=null))
	{
		Log("Variable LVAR_terminal_current not defined");
		return 0;
	}
	IFaction@faction=GetFaction(GetTerminalFaction(player));
	array<uint>records;
	int num=faction.GetRecords(records);
	
	var=records[0];
	
	if(value==1)
	{
		for(int i=0;i<num;i++)
		{
			if(records[i]==curr)
			{
				
				int idx=i+1<num?i+1:0;
				var=records[idx];
				break;
			}
		}
	}
	else if(value==-1)
	{
		for(int i=0;i<num;i++)
		{
			if(records[i]==curr)
			{
				
				int idx=i-1<0?num-1:i-1;
				var=records[idx];
				break;
			}
		}
	}
	return 0;
}    

bool IsReadOnly(uint faction,uint id)
{
	uint chosenPlayerFaction=GetPlayerFaction(id);
	{;}; 
	
	if(chosenPlayerFaction==faction)
	return true;
	else
	return false;
}     

uint r_ModifyStatus(Critter&player,Critter@npc,int value)
{
	
	GameVar@var=GetLocalVar((3029),player.Id);
	if(!(@var!=null))
	{
		Log("Variable LVAR_terminal_current not defined");
		return 0;
	}
	
	if(!(value<=4))
	{
		Log("ERR: Invalid status value");
		return(29);
	}
	
	uint factionId=GetTerminalFaction(player);
	
	if(IsReadOnly(factionId,var.GetValue()))
	{
		return(30);
	}
	ModifyStatus(factionId,var.GetValue(),value);
	
	Critter@cr=GetCritter(var.GetValue());
	IFaction@faction=GetFaction(factionId);
	
	IncreaseUpdateSeq(factionId);
	
	if((@cr!=null))
	UpdateBasesVisibility(faction,cr);
	return 0;
}       

void r_ModifyReputation(Critter&player,Critter@npc,int value)
{
	
	GameVar@var=GetLocalVar((3029),player.Id);
	if(!(@var!=null))
	{
		Log("Variable LVAR_terminal_current not defined");
		return;
	}
	if(player.Id==uint(var.GetValue()))
	{
		player.Say((12),"You narcist!!!");
		return;
	} 
	
}     

uint r_ModifyRank(Critter&player,Critter@npc,int value)
{
	
	GameVar@var=GetLocalVar((3029),player.Id);
	if(!(@var!=null))
	{
		Log("Variable LVAR_terminal_current not defined");
		return 0;
	}
	
	if(!(value<=5))
	{
		Log("ERR: Invalid rank value");
		return(29);
	}
	
	uint factionId=GetTerminalFaction(player);
	if(IsReadOnly(factionId,var.GetValue()))
	{
		return(30);
	}
	ModifyRank(factionId,var.GetValue(),value);
	
	Critter@cr=GetCritter(var.GetValue());
	IFaction@faction=GetFaction(factionId);
	
	IncreaseUpdateSeq(factionId);
	
	if((@cr!=null))
	UpdateBasesVisibility(faction,cr);
	return 0;
}     

uint r_ModifyFaction(Critter&player,Critter@npc,int value)
{
	
	GameVar@var=GetLocalVar((3029),player.Id);
	if(!(@var!=null))
	{
		Log("Variable LVAR_terminal_current not defined");
		return 0;
	}
	
	if(!(value<((4096))))
	{
		Log("ERR: Invalid faction value");
		return(29);
	}
	
	uint factionId=GetTerminalFaction(player);
	if(IsReadOnly(factionId,var.GetValue()))
	{
		return(30);
	}
	
	ModifyFaction(factionId,var.GetValue(),value);
	
	Critter@cr=GetCritter(var.GetValue());
	IFaction@faction=GetFaction(factionId);
	if((@cr!=null))
	UpdateBasesVisibility(faction,cr);
	
	return 0;
}      

uint dlg_ModifyFactionByName(Critter&player,Critter@npc,string@say)
{
	if(!((@say!=null)&&say.length()>0))
	return 0; 
	
	GameVar@var=GetLocalVar((3029),player.Id);
	if(!(@var!=null))
	{
		Log("Variable LVAR_terminal_current not defined");
		return 0;
	}
	
	uint faction=GetTerminalFaction(player);
	if(IsReadOnly(faction,var.GetValue()))
	{
		return(30);
	}
	uint modifiedFaction=0;
	
	if(!GetFactionId(say,modifiedFaction))
	{
		player.SayMsg((12),(1),(1000000000+((9060))*100000+((30))));
		return 0;
	}
	
	ModifyFaction(faction,var.GetValue(),modifiedFaction);
	return(22);
}       

uint dlg_Invite(Critter&recruiter,Critter@npc,string@playerName)
{
	if(!(@playerName!=null)||playerName.length()==0)
	return 0; 
	
	uint initiateId=GetPlayerId(playerName);
	if(initiateId==0)
	{
		recruiter.Say((12),"Player not found");
		return 0;
	}
	
	uint factionId=GetTerminalFaction(recruiter);
	
	if(IsMemberOffline(factionId,initiateId))
	{
		recruiter.Say((12),"Already a member");
		return 0;
	}
	
	int res=InvitePlayer(factionId,initiateId);
	if(res!=(0))
	recruiter.Say((11),"ERR: "+FD_Result2String(res));
	else
	{
		
		GameVar@var=GetLocalVar((3029),recruiter.Id);
		if(!(@var!=null))
		{
			Log("ERR: Variable LVAR_terminal_current not defined");
		}
		var=initiateId;
		
		IFaction@faction=GetFaction(factionId);
		Critter@initiate=GetCritter(initiateId);
		if((@initiate!=null))
		UpdateBasesVisibility(faction,initiate);
		
		return(22);
	}
	return 0;
}   

void r_ConfirmInvitation(Critter&player,Critter@npc,int value)
{
	uint factionId=GetTerminalFaction(player);
	
	if(factionId==0)
	{
		Log("ERR: Faction hasn't been stored in map");
		return;
	}
	if(IsMember(factionId,player))
	{
		Log("ERR: Already a member");
		return;
	} 
	
	int res=ConfirmInvitation(factionId,player.Id);
	if(res!=(0))
	Log("ERR: "+FD_Result2String(res)); 
	
	AddFactionNews(factionId,player.Id,0,(1));
	
	IFaction@faction=GetFaction(factionId);
	UpdateBasesVisibility(faction,player);
}      

uint dlg_PromoteMember(Critter&player,Critter@npc,string@playerName)
{
	if(!(@playerName!=null)||playerName.length()==0)
	return 0; 
	
	uint promoteeId=GetPlayerId(playerName);
	if(promoteeId==0)
	{
		player.Say((12),"Player not found");
		return 0;
	}
	if(!IsTheSameFaction(player.Id,promoteeId))
	{
		player.Say((12),"Not a member");
		return 0;
	}
	
	if(!PromoteMember(player.Id,promoteeId))
	{
		player.Say((12),"You cannot promote that member");
	}
	else
	{
		
		return(43);
	}
	return 0;
}   

uint r_PromoteMember(Critter&player,Critter@npc,int value)
{
	
	GameVar@var=GetLocalVar((3029),player.Id);
	if(!(@var!=null))
	{
		Log("Variable LVAR_terminal_current not defined");
		return 0;
	}
	
	if(!PromoteMember(player.Id,var.GetValue()))
	{
		return(45);
	}
	return 0;
}   

bool PromoteMember(uint promoterId,uint promoteeId)
{
	
	uint promoterFaction=GetPlayerFaction(promoterId);
	uint promoterRank=GetPlayerRank(promoterId);
	uint promoteeFaction=GetPlayerFaction(promoteeId);
	uint promoteeRank=GetPlayerRank(promoteeId);
	
	if(promoterFaction!=promoteeFaction)
	{
		Log("ERR: Invalid function call - you should only call it on members");
		return false;
	}
	
	if(promoterRank>promoteeRank+1)
	{
		int res=ChangeRank(promoterFaction,promoteeId,promoteeRank+1);
		if(res==(0))
		{
			
			AddFactionNews(promoterFaction,promoterId,promoteeId,(4));
			
			Critter@player=GetCritter(promoterId);
			if((@player!=null))
			{
				uint factionId=GetTerminalFaction(player);
				IFaction@faction=GetFaction(factionId);
				Critter@promotee=GetCritter(promoteeId);
				if((@promotee!=null))
				UpdateBasesVisibility(faction,promotee);
			}
			return true;
		}
		else
		{
			Log("ERR: "+FD_Result2String(res));
			return false;
		}
	}
	else
	{
		return false;
	}
}      

uint dlg_DemoteMember(Critter&player,Critter@npc,string@playerName)
{
	if(!(@playerName!=null)||playerName.length()==0)
	return 0; 
	
	uint demoteeId=GetPlayerId(playerName);
	if(demoteeId==0)
	{
		player.Say((12),"Player not found");
		return 0;
	}
	if(!IsTheSameFaction(player.Id,demoteeId))
	{
		player.Say((12),"Not a member");
		return 0;
	}
	
	if(!DemoteMember(player.Id,demoteeId))
	{
		player.Say((12),"You cannot demote that member");
	}
	else
	
	return(43);
	return 0;
}   

uint r_DemoteMember(Critter&player,Critter@npc,int value)
{
	
	GameVar@var=GetLocalVar((3029),player.Id);
	if(!(@var!=null))
	{
		Log("Variable LVAR_terminal_current not defined");
		return 0;
	}
	
	if(!DemoteMember(player.Id,var.GetValue()))
	{
		return(45);
	}
	return 0;
}  

bool DemoteMember(uint demoterId,uint demoteeId)
{
	
	uint demoterFaction=GetPlayerFaction(demoterId);
	uint demoterRank=GetPlayerRank(demoterId);
	uint demoteeFaction=GetPlayerFaction(demoteeId);
	uint demoteeRank=GetPlayerRank(demoteeId);
	
	if(demoterFaction!=demoteeFaction)
	{
		Log("ERR: Invalid function call - you should only call it on members");
		return false;
	}
	
	if(demoterRank>demoteeRank&&demoteeRank>2)
	{
		int res=ChangeRank(demoterFaction,demoteeId,demoteeRank-1);
		if(res==(0))
		{
			
			AddFactionNews(demoterFaction,demoterId,demoteeId,(7));
			
			Critter@player=GetCritter(demoterId);
			if((@player!=null))
			{
				uint factionId=GetTerminalFaction(player);
				IFaction@faction=GetFaction(factionId);
				Critter@demotee=GetCritter(demoteeId);
				if((@demotee!=null))
				UpdateBasesVisibility(faction,demotee);
			}
			return true;
		}
		else
		{
			Log("ERR: "+FD_Result2String(res));
			return false;
		}
	}
	else
	{
		return false;
	}
}      

uint dlg_ExpelMember(Critter&player,Critter@npc,string@playerName)
{
	if(!(@playerName!=null)||playerName.length()==0)
	return 0; 
	
	uint exileId=GetPlayerId(playerName);
	if(exileId==0)
	{
		player.Say((12),"Player not found");
		return 0;
	}
	if(!IsTheSameFaction(player.Id,exileId))
	{
		player.Say((12),"Not a member");
		return 0;
	}
	if(!_ExpelMember(player.Id,exileId))
	{
		player.Say((12),"You cannot promote that member");
	}
	else
	
	return(43);
	return 0;
}   

uint r_ExpelMember(Critter&player,Critter@npc,int value)
{
	
	GameVar@var=GetLocalVar((3029),player.Id);
	if(!(@var!=null))
	{
		Log("Variable LVAR_terminal_current not defined");
		return 0;
	}
	
	if(!_ExpelMember(player.Id,var.GetValue()))
	{
		return(45);
	}
	else
	return(5);
}  

bool _ExpelMember(uint expellerId,uint exileId)
{
	uint faction=GetPlayerFaction(expellerId);
	uint exileFaction=GetPlayerFaction(exileId);
	
	if(faction!=exileFaction)
	{
		Log("ERR: Invalid function call - you should only call it on members");
		return false;
	}
	if(expellerId==exileId)
	{
		
		return false;
	}
	int res=ExpelMember(faction,exileId);
	if(res==(0))
	{
		
		AddFactionNews(faction,expellerId,exileId,(3));
		
		Critter@player=GetCritter(expellerId);
		if((@player!=null))
		{
			uint factionId=GetTerminalFaction(player);
			IFaction@faction=GetFaction(factionId);
			Critter@exile=GetCritter(exileId);
			if((@exile!=null))
			UpdateBasesVisibility(faction,exile);
		}
		return true;
	}
	else
	{
		Log("ERR: "+FD_Result2String(res));
		return false;
	}
}   

void r_Resign(Critter&player,Critter@npc,int value)
{
	_Resign(player.Id);
	uint factionId=GetTerminalFaction(player);
	IFaction@faction=GetFaction(factionId);
	UpdateBasesVisibility(faction,player);
	
}      

uint dlg_ChooseBase(Critter&player,Critter@terminal,string@baseName)
{
	if(!(@baseName!=null)||baseName.length()==0)
	return 0;
	
	GameVar@var=GetLocalVar((3029),player.Id);
	if(!(@var!=null))
	{
		Log("Variable LVAR_terminal_current not defined");
		return 0;
	}
	
	var=0;
	
	uint faction=GetTerminalFaction(player);
	IFactionBase@base=GetFactionBase(faction,baseName);
	if(!(@base!=null))
	{
		player.Say((12),"Incorrect name");
		return 0;
	}
	
	var=base.Id;
	
	return(200);
}  

void dlg_ShowBase(Critter&player,Critter@npc,string@say)
{
	if(((@say!=null)&&say.length()==0))
	{
		GameVar@var=GetLocalVar((3029),player.Id);
		if(!(@var!=null))
		{
			Log("Variable LVAR_terminal_current not defined");
			return;
		}
		
		uint faction=GetTerminalFaction(player);
		
		uint id=var.GetValue();
		IFactionBase@base=GetFactionBase(id);
		Location@loc=GetLocation(base.LocationId);
		say+="$name"+base.Name+
		"$x"+loc.WorldX+
		"$y"+loc.WorldY+
		"$recruits_allowed"+(base.IsRankAllowed(1)?"allowed":"disallowed")+
		"$accepted_allowed"+(base.IsRankAllowed(2)?"allowed":"disallowed")+
		"$trusted_allowed"+(base.IsRankAllowed(3)?"allowed":"disallowed")+
		"$important_allowed"+(base.IsRankAllowed(4)?"allowed":"disallowed")+
		"$invited_allowed"+(base.IsStatusAllowed((4))?"allowed":"disallowed")+
		"$friends_allowed"+(base.IsStatusAllowed((1))?"allowed":"disallowed");
	}
}       

uint r_SelectBase(Critter&player,Critter@npc,int value)
{
	
	GameVar@var=GetLocalVar((3029),player.Id);
	uint curr=var.GetValue();
	uint faction=GetTerminalFaction(player);
	array<IFactionBase@>bases;
	uint num=GetFactionBases(faction,bases);
	
	var=bases[0].Id;
	
	if(value==1)
	{
		for(int i=0,iend=bases.length();i<iend;i++)
		{
			if(bases[i].Id==curr)
			{
				
				int idx=i+1<iend?i+1:0;
				var=bases[idx].Id;
				break;
			}
		}
	}
	else if(value==-1)
	{
		for(int i=0,iend=bases.length();i<iend;i++)
		{
			if(bases[i].Id==curr)
			{
				
				int idx=i-1<0?iend-1:i-1;
				var=bases[idx].Id;
				break;
			}
		}
	}
	
	return 0;
}

bool d_BaseRankAllowed(Critter&player,Critter@,int rank,int allowed)
{
	GameVar@var=GetLocalVar((3029),player.Id);
	IFactionBase@base=GetFactionBase(var.GetValue());
	if(allowed!=0&&base.IsRankAllowed(rank))
	return true;
	if(allowed==0&&!base.IsRankAllowed(rank))
	return true;
	return false;
}

void r_BaseRankAllow(Critter&player,Critter@,int rank,int allowed)
{
	GameVar@var=GetLocalVar((3029),player.Id);
	IFactionBase@base=GetFactionBase(var.GetValue());
	base.AllowRank(rank,allowed==0?false:true);
	
	array<Critter@>players;
	uint count=GetAllOnlinePlayers(players);
	uint factionId=GetTerminalFaction(player);
	IFaction@faction=GetFaction(factionId);
	
	IncreaseUpdateSeq(factionId);
	
	for(uint i=0;i<count;i++)
	{
		if((@players[i]!=null))
		UpdateOneBaseVisibility(faction,players[i],base);
	}
}

bool d_BaseStatusAllowed(Critter&player,Critter@,int status,int allowed)
{
	GameVar@var=GetLocalVar((3029),player.Id);
	IFactionBase@base=GetFactionBase(var.GetValue());
	if(allowed!=0&&base.IsStatusAllowed(status))
	return true;
	if(allowed==0&&!base.IsStatusAllowed(status))
	return true;
	return false;
}

void r_BaseStatusAllow(Critter&player,Critter@,int status,int allowed)
{
	GameVar@var=GetLocalVar((3029),player.Id);
	IFactionBase@base=GetFactionBase(var.GetValue());
	base.AllowStatus(status,allowed==0?false:true);
	
	array<Critter@>players;
	uint count=GetAllOnlinePlayers(players);
	uint factionId=GetTerminalFaction(player);
	IFaction@faction=GetFaction(factionId);
	
	IncreaseUpdateSeq(factionId);
	
	for(uint i=0;i<count;i++)
	{
		if((@players[i]!=null))
		UpdateOneBaseVisibility(faction,players[i],base);
	}
}            

uint r_SelectFaction(Critter&player,Critter@npc,int value)
{
	
	GameVar@var=GetLocalVar((3029),player.Id);
	int curr=var.GetValue();
	uint faction_id=GetTerminalFaction(player);
	IFaction@faction=GetFaction(faction_id);
	array<int>factions;
	uint num=faction.GetKnownFactions(factions);
	if(num<1)
	return 0;
	
	if(value==0)
	{
		var=factions[0];
	}
	
	else if(value==1)
	{
		for(int i=0,iend=factions.length();i<iend;i++)
		{
			if(factions[i]==curr)
			{
				
				int idx=i+1<iend?i+1:0;
				var=factions[idx];
				break;
			}
		}
	}
	else if(value==-1)
	{
		for(int i=0,iend=factions.length();i<iend;i++)
		{
			if(factions[i]==curr)
			{
				
				int idx=i-1<0?iend-1:i-1;
				var=factions[idx];
				break;
			}
		}
	}
	
	return 0;
}  

void dlg_ShowKnownFaction(Critter&player,Critter@,string@say)
{
	if(((@say!=null)&&say.length()==0))
	{
		GameVar@var=GetLocalVar((3029),player.Id);
		
		IFaction@faction=GetFaction(var.GetValue());
		if((@faction!=null))
		say+="$name"+faction.Name;
		else
		say+="$nameFaction does not exist";
	}
}   

void r_ChangeFactionStatus(Critter&player,Critter@,int status)
{
	GameVar@var=GetLocalVar((3029),player.Id);
	IFaction@faction=GetFaction(GetTerminalFaction(player));
	IFaction@known_faction=GetFaction(var.GetValue());
	array<uint>members;
	int num=known_faction.GetMembers(members);
	for(int i=0;i<num;i++)
	{
		faction.SetStatus(members[i],status);
	}
	player.Say((12),"Done");
}   

uint dlg_AddKnownFaction(Critter&player,Critter@,string@say)
{
	if(((@say!=null)&&say.length()>0))
	{
		IFaction@faction=GetFaction(GetTerminalFaction(player));
		IFaction@known_faction=GetFaction(say);
		if((@known_faction!=null))
		{
			player.Say((12),"Adding faction");
			faction.AddKnownFaction(known_faction.Id);
			GameVar@var=GetLocalVar((3029),player.Id);
			var=known_faction.Id;
			{;};
			return(300);
		}
		else
		{
			player.Say((12),"Faction does not exist");
			return 0;
		}
	}
	return 0;
}       

void dlg_ShowInfo(Critter&player,Critter@npc,string@text)
{
	if(!((@text!=null)&&text.length()==0))
	return;
	uint faction=GetTerminalFaction(player);
	uint claimId=GetClaimId(faction);
	if(claimId!=0)
	{
		if(claimId==player.Id)
		{
			text=(1000000000+((9060))*100000+((41)))+
			((__FullSecond)-GetLeaderTime(faction));
		}
		else
		{
			text=GetSafePlayerName(claimId)+
			(1000000000+((9060))*100000+((40)));
		}
	}
	else
	text="$info"+"Good morning!";
	text+="\n"+(1000000000+((9060))*100000+((42)));
}      

bool d_CanClaimLeadership(Critter&player,Critter@npc,int value)
{
	uint faction=GetTerminalFaction(player);
	
	if(IsBigFaction(faction))
	return false; 
	
	if(GetClaimId(faction)!=0)
	{
		
		if((__FullSecond)>=GetClaimTime(faction))
		return GetClaimId(faction)!=player.Id;
		else
		return false;
	}
	
	if(GetLeaderId(faction)==0)
	return true;
	
	uint rank=GetPlayerRank(player.Id);
	
	if(rank==(1)||rank==(5))
	return false;          
	
	return true;
}   

void r_ClaimLeadership(Critter&player,Critter@npc,int value)
{
	{;};
	uint faction=GetTerminalFaction(player);
	SetClaimId(faction,player.Id);
	
	SetLeaderTime(faction,((__FullSecond)+(((1)*__TimeMultiplier*86400))));
	
	SetClaimTime(faction,((__FullSecond)+(((2)*__TimeMultiplier*86400))));      
	
	AddFactionNews(faction,player.Id,0,(9));
}   

bool d_ClaimedLeadership(Critter&player,Critter@npc,int value)
{
	uint faction=GetTerminalFaction(player);
	return GetClaimId(faction)==player.Id;
}   

void r_CancelClaim(Critter&player,Critter@npc,int value)
{
	uint faction=GetTerminalFaction(player);
	SetClaimId(faction,0);
	SetLeaderTime(faction,0);
	SetClaimTime(faction,0);
}    

bool d_CanConfirmLeadership(Critter&player,Critter@npc,int value)
{
	uint faction=GetTerminalFaction(player);
	if(GetClaimId(faction)!=player.Id)
	return false; 
	
	if((__FullSecond)>=GetLeaderTime(faction))
	return true;
	if(GetLeaderId(faction)!=0)
	return false;
	return true;
}   

void r_ConfirmLeadership(Critter&player,Critter@npc,int value)
{
	{;};
	uint faction=GetTerminalFaction(player);
	int res;
	uint leaderId=GetLeaderId(faction); 
	
	if(leaderId!=0)
	{
		{;};
		ChangeRank(faction,leaderId,(2));
	}
	else
	{;};
	{;};
	ChangeRank(faction,player.Id,(5));
	SetClaimId(faction,0);
	SetClaimTime(faction,0);
	
	AddFactionNews(faction,player.Id,0,(10));
}          

uint dlg_AddPlayer(Critter&player,Critter@terminal,string@playerName)
{
	if(!(@playerName!=null)||playerName.length()==0)
	return 0; 
	
	uint playerToAddId=GetPlayerId(playerName);
	if(playerToAddId==0)
	{
		player.Say((12),"Incorrect name");
		return 0;
	}
	
	uint faction=GetTerminalFaction(player);
	
	if(faction!=(0)&&faction!=(1))
	{
		int res=AddPlayer(faction,playerToAddId);
		if(res==(0))
		{
			
			GameVar@var=GetLocalVar((3029),player.Id);
			if(!(@var!=null))
			{
				Log("ERR: Variable LVAR_terminal_current not defined");
			}
			var=playerToAddId;
			
			return(22);
		}
		else if(res==(1))
		player.Say((12),"Person is already filed in the database.");
		else
		player.Say((12),"ERR: Couldn't add the player to the faction's database.");
	}
	else
	Log("ERR: Unable to determine the player's faction");
	return 0;
}      

void dlg_RemovePlayer(Critter&player,Critter@terminal,string@playerName)
{
	if(!(@playerName!=null)||playerName.length()==0)
	return; 
	
	uint removedId=GetPlayerId(playerName);
	if(removedId==0)
	{
		player.Say((12),"Player not found");
		return;
	}
	
	uint faction=GetTerminalFaction(player);
	int res=RemovePlayer(faction,removedId);
	
	if(res==(0))
	player.Say((12),"Player succesfully removed.");
	else if(res==(2))
	player.Say((12),"Player not found in database.");
	else
	player.Say((12),"ERR: "+FD_Result2String(res));
}    

void dlg_RadioChannel(Critter&player,Critter@terminal,string@say)
{
	uint faction=GetTerminalFaction(player);
	if(((@say!=null)&&say.length()==0))
	{
		
		say+="$channel"+GetFactionRadioChannel(faction);
	}
	if(((@say!=null)&&say.length()>0))
	{
		
		if(GetPlayerRank(player.Id)<(4))
		return;
		
		int newChannel=0;
		if(StrToInt(say,newChannel)&&newChannel>=0&&newChannel<(2<<16))
		{
			SetFactionRadioChannel(faction,uint16(newChannel));
			player.SayMsg((12),(1),(1000000000+((9060))*100000+((31))));
		}
		else
		{
			player.SayMsg((12),(1),(1000000000+((9060))*100000+((32))));
		}
	}
}      

bool d_Terminal_IsMember(Critter&player,Critter@terminal,int val)
{
	uint faction=GetTerminalFaction(player);
	
	return faction==GetGroupIndex(player);
}
bool d_Terminal_NotMember(Critter&player,Critter@terminal,int val)
{
	uint faction=GetTerminalFaction(player);
	
	return faction!=GetGroupIndex(player);
}   

bool d_IsInvited(Critter&player,Critter@terminal,int val)
{
	uint faction=GetTerminalFaction(player);
	uint status=(0);
	
	return GetStatus(faction,player.Id)==(4);
}   

bool d_InvitationsAllowed(Critter&player,Critter@terminal,int val)
{
	uint faction=GetTerminalFaction(player);
	return!IsBigFaction(faction);
}        

void dlg_ShowNews(Critter&player,Critter@npc,string@text)
{
	if(!((@text!=null)&&text.length()==0))
	return;
	
	uint faction=GetTerminalFaction(player);
	uint newsCount=GetFactionNewsCount(faction);
	uint index=newsCount-player.Stat[(90)]-1;
	
	uint master=0;
	uint slave=0;
	uint type=0;
	uint16 year=0;
	uint8 month=0;
	uint8 day=0;
	uint8 hour=0;
	uint8 minute=0;
	
	if(GetFactionNews(faction,index,master,slave,type,
	year,month,day,hour,minute))
	{
		
		text+="$datetime"+day+"/"+month+"/"+year+" at: "+hour+":"+minute;
		if(master!=0)
		text+="$master"+GetSafePlayerName(master);
		if(slave!=0)
		text+="$slave"+GetSafePlayerName(slave);
	}
	else
	text="No news stored";
}    

uint r_NextNews(Critter&player,Critter@npc,int val)
{
	uint faction=GetTerminalFaction(player);
	uint newsCount=GetFactionNewsCount(faction);
	if(newsCount==0)
	return 0;
	
	player.StatBase[(90)]--;
	if(player.Stat[(90)]<0)
	player.StatBase[(90)]=0;
	if(uint(player.Stat[(90)])>=newsCount)
	player.StatBase[(90)]=newsCount-1;
	
	return GoToNewsNode(faction,newsCount-player.Stat[(90)]-1);
}    

uint r_PreviousNews(Critter&player,Critter@npc,int val)
{
	uint faction=GetTerminalFaction(player);
	uint newsCount=GetFactionNewsCount(faction);
	if(newsCount==0)
	return 0;
	
	player.StatBase[(90)]++;
	if(player.Stat[(90)]<0)
	player.StatBase[(90)]=0;
	if(uint(player.Stat[(90)])>=newsCount)
	player.StatBase[(90)]=newsCount-1;
	
	return GoToNewsNode(faction,newsCount-player.Stat[(90)]-1);
}    

uint r_GoToNews(Critter&player,Critter@npc,int val)
{
	uint faction=GetTerminalFaction(player);
	uint newsCount=GetFactionNewsCount(faction);
	{;};
	player.StatBase[(90)]=0;
	
	if(newsCount>0)
	{
		return GoToNewsNode(faction,newsCount-1);
	}
	return 0;
}    

uint GoToNewsNode(uint faction,uint index)
{
	uint type=0;
	uint master=0,slave=0;
	uint16 year;
	uint8 month,day,hour,minute;
	if(GetFactionNews(faction,index,master,slave,type,year,month,day,hour,minute))
	{
		uint force=0;
		{;};
		switch(type)
		{
			case(1):
			force=(110);
			break;
			case(2):
			force=(111);
			break;
			case(3):
			force=(112);
			break;
			case(4):
			force=(113);
			break;
			case(7):
			force=(114);
			break;
			case(9):
			force=(115);
			break;
			case(10):
			force=(116);
			break;
			case(11):
			force=(117);
			break;
		}
		return force;
	}
	return 0;
	
}   

void r_UpdateLastUsed(Critter&player,Critter@npc)
{
	{};
	uint faction=GetTerminalFaction(player);
	UpdateLastUsed(faction);
}
